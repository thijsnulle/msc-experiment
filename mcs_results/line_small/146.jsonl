{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 29, 32, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35, 32, 30, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 29, 33, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 36, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 30, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 34, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 32, 30, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 29, 30, 34, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.00873112678527832, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29, 32, 36, 30, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29, 32, 30, 33, 36, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34, 30, 29, 33, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 29, 30, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 30, 34, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 35, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 29, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 29, 30, 32, 36, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 33, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 30, 29, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 36, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33, 32, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 34, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009098052978515625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 29, 33, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 32, 35, 29, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 34, 36, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34, 29, 32, 33, 30, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.007676124572753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29, 36, 33, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 36, 32, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 32, 36, 33, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34, 29, 30, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 36, 29, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 33, 29, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29, 32, 35, 34, 30, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 36, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 29, 36, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 30, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 29, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 35, 32, 34, 29, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 35, 30, 34, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 32, 34, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0018701553344726562, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 33, 29, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 30, 29, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 36, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 36, 30, 32, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 32, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 30, 33, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33, 29, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 33, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34, 30, 36, 35, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34, 33, 32, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35, 29, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 29, 36, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30, 29, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34, 29, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 30, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.007676124572753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 34, 33, 30, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 33, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 33, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 34, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0018701553344726562, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [35, 34, 30, 36, 29, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 35, 32, 29, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 36, 33, 30, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 29, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 33, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34, 30, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.00873112678527832, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29, 34, 33, 30, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36, 33, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 36, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 36, 30, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 35, 32, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35, 33, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 30, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0018701553344726562, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 33, 29, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32, 30, 36, 29, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 34, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 36, 29, 35, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 36, 32, 35, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 35, 36, 29, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 33, 32, 35, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 32, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.007676124572753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 34, 33, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 36, 32, 33, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 35, 32, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.007676124572753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 32, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 36, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 36, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32, 36, 33, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 29, 35, 34, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 34, 29, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 34, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 30, 36, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 33, 30, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 32, 34, 33, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 36, 29, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 35, 32, 34, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 29, 33, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 36, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 35, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 29, 33, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 34, 32, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 32, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33, 29, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 32, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 33, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 32, 35, 36, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 36, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 29, 36, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 30, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 36, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.007676124572753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 32, 30, 35, 36, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 34, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 29, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 35, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 35, 29, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 33, 29, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.00873112678527832, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 36, 34, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 35, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 29, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0018701553344726562, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32, 33, 36, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 33, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 32, 33, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0081830024719238, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29, 32, 30, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 33, 34, 36, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 30, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32, 33, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 30, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 32, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33, 29, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35, 29, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 30, 35, 33, 29, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 34, 29, 33, 30, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.00873112678527832, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 30, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 29, 32, 35, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 36, 32, 34, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 33, 29, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 35, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32, 30, 33, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 29, 30, 35, 34, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30, 29, 32, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 33, 36, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34, 36, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 32, 33, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call([\"ping\", \"-c\", \"1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.008195161819458, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 33, 35, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(f\"ping -c 1 -W 1 {ip}\", shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0095579624176025, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output([\"ping\", \"-c1\", str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017688274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 36, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0080089569091797, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', f'{ip}'], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.006561994552612305, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 -W 1 {ip.exploded}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017223358154296875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 30, 35, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 36, 35, 34, 33, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 30, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017902851104736328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_addr in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 34, 30, 32, 33, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 32, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = []\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.00873112678527832, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT, timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 32, 29, 35, 30, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005962848663330078, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPAddressRange(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011022090911865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run([\"ping\", \"-c\", \"1\", str(ip)], stdout=subprocess.DEVNULL,\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0006711483001708984, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0100600719451904, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_addresses():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.008117914199829102, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)], timeout=1)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0089809894561768, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 36, 32, 30, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_call(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 35, 33, 30, 32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip_address in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -n 1 -q {ip.str} >/dev/null', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 30, 34, 29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(f'ping -c 1 -W 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', ip.str])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0018701553344726562, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 30, 29, 34, 33], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 34], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 33, 32, 36], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29, 33, 30, 35], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).hosts():\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPNetwork(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_call(['ping', '-c', '1', str(ip)])\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0096099376678467, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range).iter_hosts():\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": false, "time": 0.0005898475646972656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.run(['ping', '-c', '1', str(ip)], capture_output=True, timeout=1, check=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 1.0176241397857666, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nfrom ipaddress import IPv4Network\n\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status (True if the ping is successful, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation (e.g., '192.168.0.0/24').\n\n    Requirements:\n    - ipaddress\n    - subprocess\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their active status.\n\n    Raises:\n        subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\n\n    Examples:\n    >>> result = task_func('192.168.1.0/24')\n    >>> isinstance(result, dict)\n    True\n    >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items())\n    True\n    \"\"\"\n    active_ips = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n    return active_ips", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": true, "error": null}}
