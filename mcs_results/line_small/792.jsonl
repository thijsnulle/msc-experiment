{"selected_lines": [55, 53, 50, 56, 54, 57, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008081912994384766, "tests_passed": true, "error": null}}
{"selected_lines": [53, 57, 54, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006929874420166016, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 53, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 50, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011915922164916992, "tests_passed": true, "error": null}}
{"selected_lines": [54, 52, 53, 51, 56, 57, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51, 57, 54, 49, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0063321590423583984, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 53, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 51, 53, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 56, 50, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005396842956542969, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006385087966918945, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [57, 52, 50, 54, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00747990608215332, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 51, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006166696548461914, "tests_passed": true, "error": null}}
{"selected_lines": [51, 53, 50, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature]\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 53, 50, 52, 55, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 49, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010917186737060547, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 49, 54, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.005921125411987305, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 52, 50, 55, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 55, 57, 53, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 54, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 52, 49, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 49, 53, 57, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006791114807128906, "tests_passed": true, "error": null}}
{"selected_lines": [51, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005995988845825195, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 51, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 53, 55, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 51, 52, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 52, 55, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005385875701904297, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004870176315307617, "tests_passed": true, "error": null}}
{"selected_lines": [54, 52, 50, 57, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 51, 57, 54, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 55, 52, 51, 57, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 57, 51, 55, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010217905044555664, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 56, 55, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 55, 50, 52, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006248950958251953, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 52, 51, 55, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 57, 50, 52, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011297941207885742, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 50, 52, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 55, 49, 50, 52, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 56, 53, 54, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006190061569213867, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004853010177612305, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 49, 57, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 52, 49, 57, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 53, 49, 54, 52, 50, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 51, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 54, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011533975601196289, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007127046585083008, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003390789031982422, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [50, 54, 56, 51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.012090921401977539, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 56, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007349967956542969, "tests_passed": true, "error": null}}
{"selected_lines": [57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 55, 57, 51, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 52, 54, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008179426193237305, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 56, 57, 55, 49, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007458209991455078, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 49, 54, 52, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 55, 57, 52, 51, 56, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006385087966918945, "tests_passed": true, "error": null}}
{"selected_lines": [51, 54, 49, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 53, 49, 56, 51, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 56, 53, 51, 54, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004701852798461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [52, 54, 49, 55, 56, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 53, 49, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0074841976165771484, "tests_passed": true, "error": null}}
{"selected_lines": [53, 52, 49, 55, 51, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008159875869750977, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 57, 51, 54, 53, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005990743637084961, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005993366241455078, "tests_passed": true, "error": null}}
{"selected_lines": [49, 55, 50, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005389213562011719, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 55, 57, 54, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 54, 50, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature]\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 53, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006761789321899414, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006929874420166016, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 50, 49, 54, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 51, 53, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008313894271850586, "tests_passed": true, "error": null}}
{"selected_lines": [53, 52, 55, 56, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 55, 53, 54, 50, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 49, 51, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56, 54, 57, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 51, 49, 52, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = sorted(\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 56, 57, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005426883697509766, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 56, 57, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073511600494384766, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 55, 56, 51, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 57, 52, 49, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005990743637084961, "tests_passed": true, "error": null}}
{"selected_lines": [53, 49, 56, 52, 55, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 50, 49, 55, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 56, 55, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006114006042480469, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005910158157348633, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 56, 54, 57, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 57, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008355855941772461, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 50, 57, 52, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007258176803588867, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 50, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006103992462158203, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 53, 52, 55, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 53, 56, 54, 49, 50, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 51, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003226041793823242, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [54, 50, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.013754844665527344, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.012424945831298828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 50, 56, 53, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 55, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007390022277832031, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 49, 52, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 52, 49, 56, 51, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.00615692138671875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 50, 57, 53, 56, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010917186737060547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 56, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 52, 55, 49, 53, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.005979061126708984, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 50, 55, 51, 57, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 56, 54, 51, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[[feature]].values.ravel()\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 49, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 54, 55, 57, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.4370560646057129, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 52, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 56, 55, 53, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010718822479248047, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 52, 54, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 55, 57, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007157087326049805, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0075380802154541016, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006822109222412109, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 55, 56, 49, 52, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003142118453979492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [57, 54, 53, 55, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 52, 50, 54, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005143880844116211, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 49, 55, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 53, 49, 52, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004839897155761719, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010917186737060547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010718822479248047, "tests_passed": true, "error": null}}
{"selected_lines": [53, 57, 51, 50, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007301807403564453, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 54, 51, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010871171951293945, "tests_passed": true, "error": null}}
{"selected_lines": [50, 57, 56, 54, 52, 55, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 49, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005433082580566406, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49, 53, 51, 54, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 53, 50, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 54, 56, 51, 53, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 53, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [54, 55, 52, 50, 57, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010019779205322266, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 55, 52, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 53, 49, 52, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004839897155761719, "tests_passed": true, "error": null}}
{"selected_lines": [54, 53, 55, 50, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 55, 49, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 53, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006882905960083008, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.012424945831298828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 49, 53, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006768941879272461, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 57, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006126880645751953, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 53, 52, 56, 49, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 50, 53, 51, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008243799209594727, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 53, 56, 57, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006780862808227539, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 54, 51, 55, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 52, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009300947189331055, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 57, 55, 56, 53, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0069200992584228516, "tests_passed": true, "error": null}}
{"selected_lines": [55, 57, 53, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 54, 57, 51, 56, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 52, 54, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 56, 57, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 51, 56, 54, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0069200992584228516, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.012424945831298828, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [57, 52, 49, 50, 51, 55, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005302906036376953, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.014343976974487305, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 52, 57, 56, 49, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 56, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005330085754394531, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006682872772216797, "tests_passed": true, "error": null}}
{"selected_lines": [51, 54, 52, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 49, 50, 52, 57, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 52, 54, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007899999618530273, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 53, 56, 51, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 54, 49, 53, 50, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 57, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.007790088653564453, "tests_passed": true, "error": null}}
{"selected_lines": [51, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 56, 54, 51, 50, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 55, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 56, 52, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 57, 50, 51, 52, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 56, 55, 54, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [52, 53, 51, 49, 55, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 49, 53, 55, 50, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 53, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 56, 57, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 49, 52, 50, 55, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009173154830932617, "tests_passed": true, "error": null}}
{"selected_lines": [49, 57, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 55, 51, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 49, 53, 52, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.012424945831298828, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 55, 56, 57, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 53, 56, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 54, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 56, 52, 50, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 51, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011861085891723633, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 56, 49, 50, 52, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005632162094116211, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 56, 49, 55, 53, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006500959396362305, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 49, 56, 54, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005298137664794922, "tests_passed": true, "error": null}}
{"selected_lines": [53, 49, 55, 50, 54, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 57, 56, 49, 55, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011526823043823242, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005349159240722656, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 51, 55, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 56, 57, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 52, 56, 49, 54, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005338907241821289, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.013754844665527344, "tests_passed": true, "error": null}}
{"selected_lines": [49, 57, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 56, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007082939147949219, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [54, 57, 50, 51, 49, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006165027618408203, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007368326187133789, "tests_passed": true, "error": null}}
{"selected_lines": [54, 53, 52, 56, 49, 51, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 52, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005238056182861328, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 51, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [51, 56, 55, 57, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 51, 55, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006734132766723633, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010724067687988281, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 50, 49, 52, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 49, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005135059356689453, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 54, 56, 52, 53, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 53, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 57, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 51, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005385875701904297, "tests_passed": true, "error": null}}
{"selected_lines": [55, 49, 57, 51, 52, 56, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 54, 49, 53, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 54, 51, 55, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51, 54, 52, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 55, 56, 57, 51, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 49, 52, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073490142822265625, "tests_passed": true, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0028269290924072266, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0028412342071533203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [56, 57, 55, 51, 54, 53, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 53, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 55, 51, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006385087966918945, "tests_passed": true, "error": null}}
{"selected_lines": [57, 53, 51, 50, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003312826156616211, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [55, 49, 51, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065119266510009766, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 52, 49, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 54, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [55, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 56, 55, 50, 54, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 49, 55, 56, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 50, 49, 55, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011937856674194336, "tests_passed": true, "error": null}}
{"selected_lines": [50, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007260322570800781, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006706953048706055, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010917186737060547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 53, 56, 49, 54, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values.reshape(-1)\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006677150726318359, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 51, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": false, "time": 0.000225067138671875, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [50, 54, 57, 49, 52, 55, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 56, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 49, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006644010543823242, "tests_passed": true, "error": null}}
{"selected_lines": [51, 55, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 54, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 56, 50, 52, 51, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 56, 49, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006958723068237305, "tests_passed": true, "error": null}}
{"selected_lines": [51, 54, 57, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006123065948486328, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 52, 51, 57, 49, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 50, 52, 57, 53, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 52, 54, 53, 57, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 50, 53, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005347013473510742, "tests_passed": true, "error": null}}
{"selected_lines": [49, 57, 51, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 54, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0058078765869140625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56, 51, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 51, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005990743637084961, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 57, 54, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 57, 50, 51, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 49, 53, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006175041198730469, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 50, 55, 56, 54, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 54, 55, 53, 51, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0024559497833251953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [52, 55, 53, 56, 57, 50, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 50, 51, 49, 52, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008800029754638672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 55, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 57, 51, 50, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 49, 51, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 53, 54, 52, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 51, 56, 57, 50, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005352020263671875, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 54, 50, 57, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 56, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 52, 53, 55, 56, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 55, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 51, 56, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 56, 54, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006155967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 56, 57, 51, 49, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005356788635253906, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 51, 52, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 56, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 53, 56, 50, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 54, 49, 52, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006058931350708008, "tests_passed": true, "error": null}}
{"selected_lines": [55, 49, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010869026184082031, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 57, 51, 52, 53, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [55, 49, 53, 57, 50, 52, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 51, 50, 49, 53, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 56, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003142118453979492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 50, 49, 53, 52, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 50, 49, 55, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 50, 55, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 57, 54, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006134748458862305, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 53, 56, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 56, 57, 50, 55, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 57, 52, 49, 53, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49, 57, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.00574493408203125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007458209991455078, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 57, 54, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 51, 54, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 52, 54, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 57, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006470203399658203, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 52, 57, 54, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 50, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006133079528808594, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 57, 56, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 56, 55, 57, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011523008346557617, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 50, 49, 57, 55, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.008312702178955078, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 51, 56, 50, 52, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 50, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 53, 51, 54, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df.loc[:, [feature]]\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 54, 57, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 53, 52, 57, 51, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 49, 51, 53, 55, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[[feature, target]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 53, 57, 55, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007955074310302734, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 49, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56, 55, 53, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 56, 51, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 52, 49, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 49, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073621273040771484, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 56, 49, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0047948360443115234, "tests_passed": true, "error": null}}
{"selected_lines": [49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 50, 57, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 55, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 55, 50, 56, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51, 54, 57, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.013880014419555664, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010724067687988281, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 49, 56, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 53, 50, 51, 57, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 55, 56, 57, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 57, 50, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 55, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 53, 52, 50, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 50, 55, 54, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 53, 52, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56, 52, 53, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 53, 54, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 57, 50, 55, 49, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 52, 56, 53, 50, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009273767471313477, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 55, 51, 53, 56, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007384061813354492, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 54, 56, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 53, 50, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 55, 52, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006132364273071289, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 49, 54, 55, 52, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 53, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009862899780273438, "tests_passed": true, "error": null}}
{"selected_lines": [57, 53, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0072367191314697266, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 53, 57, 51, 49, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 55, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 51, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 50, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0066950321197509766, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 55, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 57, 51, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 52, 57, 56, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.012000083923339844, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 49, 53, 56, 54, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009252071380615234, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007381916046142578, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 51, 57, 55, 50, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 53, 50, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 56, 57, 49, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 49, 51, 52, 54, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 51, 55, 54, 56, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 50, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 53, 55, 50, 56, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 53, 52, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 53, 57, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 54, 53, 56, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004939079284667969, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003226041793823242, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [56, 52, 49, 53, 54, 50, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006385087966918945, "tests_passed": true, "error": null}}
{"selected_lines": [57, 53, 56, 49, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00733494758605957, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 53, 51, 50, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 54, 50, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 51, 50, 57, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 56, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006114959716796875, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 49, 53, 57, 54, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010350942611694336, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0031099319458007812, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [54, 56, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005302906036376953, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 57, 54, 51, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df.loc[:, [feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.01036524772644043, "tests_passed": true, "error": null}}
{"selected_lines": [51, 55, 49, 50, 53, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007256031036376953, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 55, 51, 49, 54, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 49, 57, 53, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 55, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 51, 50, 57, 53, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 56, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [57, 53, 50, 49, 55, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 53, 52, 56, 51, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 55, 54, 49, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 50, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006762027740478516, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 55, 57, 56, 53, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 56, 54, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010782957077026367, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 57, 55, 49, 50, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0061070919036865234, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007067203521728516, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 52, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 53, 49, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.013876199722290039, "tests_passed": true, "error": null}}
{"selected_lines": [55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 53, 51, 52, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 55, 50, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 56, 51, 52, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 56, 53, 49, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 50, 49, 54, 56, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 56, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 49, 54, 57, 52, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006780862808227539, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010811328887939453, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00742030143737793, "tests_passed": true, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003142118453979492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 56, 52, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 49, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 52, 53, 50, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006762027740478516, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 54, 50, 53, 52, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006650686264038086, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 51, 53, 54, 56, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 54, 55, 49, 52, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 54, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011533975601196289, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006706953048706055, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 53, 54, 56, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008400917053222656, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0031099319458007812, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55, 53, 56, 57, 49, 54, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010724067687988281, "tests_passed": true, "error": null}}
{"selected_lines": [54, 52, 51, 53, 50, 55, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0049190521240234375, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006762027740478516, "tests_passed": true, "error": null}}
{"selected_lines": [55, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 50, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007412910461425781, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 51, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 53, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 53, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 52, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006429195404052734, "tests_passed": true, "error": null}}
{"selected_lines": [57, 56, 51, 49, 54, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009402275085449219, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 51, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 53, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 49, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 54, 52, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006958723068237305, "tests_passed": true, "error": null}}
{"selected_lines": [53, 57, 49, 54, 55, 56, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010705947875976562, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 54, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00482630729675293, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 50, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 52, 57, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010591983795166016, "tests_passed": true, "error": null}}
{"selected_lines": [52, 57, 53, 51, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 52, 50, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 53, 57, 49, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010591983795166016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.01080775260925293, "tests_passed": true, "error": null}}
{"selected_lines": [55, 51, 57, 52, 54, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 54, 51, 52, 55, 56, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 52, 49, 55, 57, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008891105651855469, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 55, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 56, 57, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 49, 54, 53, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 53, 55, 54, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 54, 55, 56, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 55, 53, 56, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004818916320800781, "tests_passed": true, "error": null}}
{"selected_lines": [54, 53, 57, 50, 52, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00775909423828125, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 49, 51, 56, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008329153060913086, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007258176803588867, "tests_passed": true, "error": null}}
{"selected_lines": [53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007458209991455078, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 50, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 57, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 49, 55, 53, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 55, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 52, 49, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011388778686523438, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 50, 56, 55, 54, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 57, 49, 50, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 55, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 49, 52, 53, 51, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006706953048706055, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008179426193237305, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 57, 53, 56, 54, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 52, 57, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 57, 55, 49, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 49, 52, 55, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 51, 55, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 57, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [57, 52, 55, 54, 53, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005223989486694336, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0074770450592041016, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 57, 53, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 55, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 50, 53, 55, 51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 56, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 51, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 51, 54, 57, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010593891143798828, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 56, 50, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0067291259765625, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 50, 49, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010917186737060547, "tests_passed": true, "error": null}}
{"selected_lines": [55, 57, 49, 53, 52, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 55, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 51, 50, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[[feature, target]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 55, 52, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006067037582397461, "tests_passed": true, "error": null}}
{"selected_lines": [50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 56, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 50, 51, 52, 53, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.013889789581298828, "tests_passed": true, "error": null}}
{"selected_lines": [53, 49, 55, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0060727596282958984, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 51, 52, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0061190128326416016, "tests_passed": true, "error": null}}
{"selected_lines": [57, 53, 49, 55, 51, 54, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 53, 55, 57, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004873037338256836, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 54, 52, 53, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00729680061340332, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0070722103118896484, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 51, 52, 55, 57, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00611424446105957, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010709762573242188, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 50, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00644993782043457, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 49, 50, 52, 56, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 52, 54, 56, 50, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 53, 49, 52, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0058443546295166016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 56, 55, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008648157119750977, "tests_passed": true, "error": null}}
{"selected_lines": [57, 56, 49, 52, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 57, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 52, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 50, 51, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 55, 57, 50, 49, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 53, 54, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 56, 49, 51, 55, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 49, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0052471160888671875, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00532984733581543, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 50, 55, 52, 49, 53, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[[feature]].values\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 54, 57, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 49, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004848957061767578, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 57, 51, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 57, 56, 51, 54, 52, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005990743637084961, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [51, 56, 55, 49, 54, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 51, 56, 52, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 49, 54, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 57, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 49, 55, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 49, 53, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 56, 57, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 54, 55, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008179426193237305, "tests_passed": true, "error": null}}
{"selected_lines": [57, 56, 49, 54, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005279064178466797, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [52, 56, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 54, 50, 51, 57, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0051419734954833984, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [54, 55, 50, 57, 53, 52, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 55, 53, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 50, 53, 49, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0061092376708984375, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 53, 57, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 49, 56, 54, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005298137664794922, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007368326187133789, "tests_passed": true, "error": null}}
{"selected_lines": [53, 57, 51, 52, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 57, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011371850967407227, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 55, 57, 52, 53, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 57, 49, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010930061340332031, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 56, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 51, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009881258010864258, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [56, 55, 50, 49, 57, 51, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 49, 54, 50, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.01197504997253418, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 52, 49, 51, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006125926971435547, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 49, 56, 50, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073816776275634766, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0074770450592041016, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 57, 54, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 56, 51, 57, 50, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 51, 54, 52, 50, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00939321517944336, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 51, 53, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010806083679199219, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 51, 49, 52, 55, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 56, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.01150822639465332, "tests_passed": true, "error": null}}
{"selected_lines": [52, 57, 51, 56, 49, 55, 54, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 56, 54, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009386301040649414, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 53, 51, 54, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010661125183105469, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 51, 56, 54, 55, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005389213562011719, "tests_passed": true, "error": null}}
{"selected_lines": [55, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [51, 53, 57, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 51, 53, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 56, 57, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0028412342071533203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [55, 54, 52, 51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005305051803588867, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 55, 50, 57, 56, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 54, 51, 56, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 50, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 51, 50, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073816776275634766, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 49, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007458209991455078, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 56, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.008816957473754883, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007397890090942383, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073816776275634766, "tests_passed": true, "error": null}}
{"selected_lines": [56, 55, 50, 51, 52, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 53, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 54, 51, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.009296894073486328, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005389213562011719, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007537841796875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00669407844543457, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0069200992584228516, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005357027053833008, "tests_passed": true, "error": null}}
{"selected_lines": [56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004778861999511719, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 54, 50, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005990743637084961, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [55, 56, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 57, 53, 51, 56, 52, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 52, 53, 50, 56, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 55, 57, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006650686264038086, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005281925201416016, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [55, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 51, 57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 53, 49, 50, 51, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009368658065795898, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 56, 53, 50, 54, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Column(s) {feature} and/or {target} not in the provided dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 56, 54, 57, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006445169448852539, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 57, 49, 56, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [57, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0060842037200927734, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 50, 53, 49, 54, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 57, 55, 50, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 49, 55, 51, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 57, 52, 50, 53, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 53, 49, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [51, 57, 55, 53, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0028412342071533203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005990743637084961, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 56, 57, 55, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.01384592056274414, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 52, 53, 54, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 49, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 53, 51, 52, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 55, 51, 50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00613093376159668, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.004823923110961914, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 56, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009316205978393555, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 52, 56, 57, 54, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 55, 50, 52, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 49, 51, 50, 54, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 56, 57, 50, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [51, 55, 56, 50, 54, 57, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 51, 50, 56, 49, 53, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005299091339111328, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 51, 55, 50, 57, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006112813949584961, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 53, 56, 51, 54, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 52, 56, 50, 51, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns):\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nsmallest(n, enumerate(residuals), key=lambda x: x[1])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 57, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006445169448852539, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 57, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0058896541595458984, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 49, 54, 55, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature, target]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009881258010864258, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 49, 54, 55, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 49, 52, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0073816776275634766, "tests_passed": true, "error": null}}
{"selected_lines": [55, 52, 57, 56, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 49, 51, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003081083297729492, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006711006164550781, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0070209503173828125, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 49, 56, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].to_numpy()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 49, 57, 53, 52, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 52, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.011945009231567383, "tests_passed": true, "error": null}}
{"selected_lines": [55, 50, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 53, 57, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006660938262939453, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 53, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} are not in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"One or more column names are not valid.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = sorted(\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 55, 57, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(model.predict(X) - y)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 52, 49, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0028412342071533203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [52, 53, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [53, 50, 55, 56, 57, 51, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 52, 50, 57, 54, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 55, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 55, 49, 50, 52, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = model.resid\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 57, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006103992462158203, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 54, 49, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0060880184173583984, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 52, 49, 57, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 54, 52, 55, 49, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 50, 56, 52, 55, 51, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005125999450683594, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0060689449310302734, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0066568851470947266, "tests_passed": true, "error": null}}
{"selected_lines": [52, 57, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 51, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 57, 50, 55, 53, 56, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 54, 55, 56, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 53, 56, 49, 50, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).ravel()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005339145660400391, "tests_passed": true, "error": null}}
{"selected_lines": [52, 55, 49, 54, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 57, 50, 53, 54, 49, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0052530765533447266, "tests_passed": true, "error": null}}
{"selected_lines": [50, 57, 53, 54, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.00744175910949707, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010917186737060547, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 49, 54, 56, 53, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006706953048706055, "tests_passed": true, "error": null}}
{"selected_lines": [57, 56, 50, 54, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007371187210083008, "tests_passed": true, "error": null}}
{"selected_lines": [55, 57, 56, 54, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argpartition(residuals, n)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 54, 50, 52, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Invalid feature and/or target columns.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0061550140380859375, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 53, 50, 57, 56, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError('Columns are not found in dataframe.')\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 51, 49, 57, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 55, 57, 53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010071992874145508, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0028412342071533203, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [54, 55, 50, 56, 52, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006680011749267578, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.003390789031982422, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [53, 50, 55, 49, 54, 52, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df for col in [feature, target]):\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 55, 52, 56, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(i - model.predict(np.array([i]).reshape(-1, 1))) for i in df[feature]]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 57, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.006085872650146484, "tests_passed": true, "error": null}}
{"selected_lines": [55, 56, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.array([abs(model.predict([[x]])[0] - y) for x in X])\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 52, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 49, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df or target not in df:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005383968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.009328842163085938, "tests_passed": true, "error": null}}
{"selected_lines": [55, 54, 57, 52, 51, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not (feature in df.columns and target in df.columns):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df.loc[:, [feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 53, 55, 54], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.010144233703613281, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0065310001373291016, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006762027740478516, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 52, 49, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 49, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Feature and target columns must be in the provided DataFrame.\")\n    X = df[[feature]].values.ravel()\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 49, 56, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(f\"Columns {feature} and {target} not found in dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 55, 54, 50, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 56, 54, 57, 52, 55, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not set(feature).issubset(df.columns) or not set(target).issubset(df.columns):\n        raise ValueError(\"Invalid feature or target column\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values.reshape(-1)\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = (y - model.predict(X)).tolist()\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006139993667602539, "tests_passed": true, "error": null}}
{"selected_lines": [57, 55, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid column name(s): feature: {feature}, target: {target}\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 56, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 54, 57, 56, 50, 53, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005993366241455078, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 49, 51, 50, 53, 52, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Both columns must exist in the dataframe\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y[i] - model.predict(X[i].reshape(1, -1))) for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 55, 57, 56, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"One of the provided columns '{feature}' or '{target}' does not exist in the dataframe.\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[::-1][:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": false, "time": 0.0002567768096923828, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 52, 56, 50, 57, 51, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[[feature]]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = sorted(\n    return list(largest_residual_indices), model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the dataframe.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006711006164550781, "tests_passed": true, "error": null}}
{"selected_lines": [57, 55, 56, 51, 54, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns not in the provided DataFrame.\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.iloc[:, -1].copy()\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 49, 50, 54, 57, 52, 51, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"'{feature}' and '{target}' are not in the provided dataframe\")\n    X = df[feature]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [model.resid_sum_squares]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.006171226501464844, "tests_passed": true, "error": null}}
{"selected_lines": [55, 57, 50, 52, 53, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y - model.predict(X))[i] for i in range(len(y))]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.010050058364868164, "tests_passed": true, "error": null}}
{"selected_lines": [53, 57, 54, 50, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Columns must be in dataframe\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 57, 55, 50, 49, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if (feature not in df.columns) or (target not in df.columns):\n        raise ValueError('Both feature and target must be specified and both must be columns in the provided dataframe')\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[feature].values.reshape(1, -1))[0] - df[target].values[i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 56, 55, 50, 53, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Error: Columns not found\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 54, 57, 55, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[[feature]].values\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.array(df[target]) - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 52, 51, 57, 49, 55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(y_pred - y) for y_pred in model.predict(X)]\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = [abs(model.predict(df[[feature]])[i] - df[target][i])\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": false, "time": 0.000225067138671875, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [51, 50, 54, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Invalid columns. Available columns: {list(df.columns)}\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 56, 52, 57, 54, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"The provided columns do not exist in the DataFrame\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 54, 52, 49, 55, 51, 50], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(\"Invalid column names. Please ensure feature and target columns exist in the DataFrame.\")\n    X = df[[feature]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1,1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.005301952362060547, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 49, 54, 56, 51], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = np.argsort(-residuals)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 55, 54, 49, 53, 50, 52, 56], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"{feature} and {target} must be columns in df\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = np.abs(y - model.predict(X))\n    largest_residual_indices = np.argsort(residuals)[-n:]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 56, 54, 49, 57, 51, 52, 53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if not all(col in df.columns for col in [feature, target]):\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    residuals = [abs(model.predict(X)[i] - y[i]) for i in range(len(y))]\n    largest_residual_indices = sorted(range(len(residuals)), key=lambda x: abs(residuals[x]), reverse=True)[:n]\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 53, 57, 55, 52], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = df.loc[:, 'col1'].drop(target).values.reshape(-1)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 49], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns:\n        raise ValueError(f\"Both feature and target must be present in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0066220760345458984, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 56, 51, 52, 57], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Invalid column name specified\")\n    X = df[feature]\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nsmallest(n, range(len(residuals)), key=lambda i: residuals[i])\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import heapq\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, feature, target, n=10):\n    \"\"\"\n    Fit a simple linear regression model to two columns of a DataFrame \n    specified by feature and target. \n    return the indices of the n largest residuals as well as the linear \n    regression model.\n    \n    Parameters:\n    df (pandas.DataFrame): A DataFrame with at least two numerical columns named 'col1' and 'col2'.\n    feature (str): The DataFrame column used as feature.\n    target (str): The DataFrame column used as target.\n    n (int, optional): Number of largest residuals to return. Default is 10.\n    \n    Returns:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\n    \n    Raises:\n    ValueError: If specified columns are not in the provided DataFrame.\n\n    Requirements:\n    - heapq\n    - sklearn.linear_model\n    \n    Example:\n    >>> df = pd.DataFrame({\n    ...     'col1': [99, 86, 90, 70, 86, 95, 56, 98, 80, 81],\n    ...     'col2': [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    ... })\n    >>> indices, model = task_func(df, 'col1', 'col2', n=5)\n    >>> print(indices)\n    [0, 1, 9, 7, 8]\n    >>> print(model)\n    LinearRegression()\n\n    >>> df = pd.DataFrame({\n    ...     'a': [1, 2, 3, 4, 5],\n    ...     'b': [1, 2, 3, 4, 5]\n    ... })\n    >>> indices, model = task_func(df, 'a', 'b', n=3)\n    >>> print(indices)\n    [0, 1, 2]\n    >>> print(model)\n    LinearRegression()\n    \"\"\"\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model", "compilation_passed": true, "time": 0.007498025894165039, "tests_passed": true, "error": null}}
