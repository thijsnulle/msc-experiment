{"selected_lines": [33, 36, 35, 34, 32, 29, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012738704681396484, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010857582092285156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 30, 31, 33, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010161399841308594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010418891906738281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009362697601318359, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013527870178222656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 33, 34, 32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 33, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009746551513671875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009763240814208984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010418891906738281, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 35, 36, 34, 32, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011060237884521484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 29, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 29, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0038411617279052734, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 34, 32, 36, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009198188781738281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 32, 36, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001028299331665039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 33, 37, 36, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001210927963256836, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010538101196289062, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29, 34, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012559890747070312, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014340877532958984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015401840209960938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 31, 36, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 29, 31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009708404541015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005887031555175781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 30, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 35, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 30, 34, 35, 31, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011262893676757812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 37, 31, 29, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 34, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 37, 35, 36, 34, 33, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009510517120361328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 31, 29, 36, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() ** 0.5\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010259151458740234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 35, 30, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 30, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009627342224121094, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 37, 34, 31, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009140968322753906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 31, 30, 32, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012831687927246094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005251169204711914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 33, 32, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005502939224243164, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 31, 35, 29, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 33, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009751319885253906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005655765533447266, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010662078857421875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 30, 36, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010311603546142578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 29, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012450218200683594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 35, 34, 37, 33, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011909008026123047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 36, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30, 34, 35, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010077953338623047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 35, 37, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001188039779663086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010328292846679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 32, 34, 35, 33, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.uniform(0, RADIUS)\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009980201721191406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 35, 32, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009927749633789062, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 30, 36, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 35, 32, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010831356048583984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 34, 32, 36, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009198188781738281, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005259990692138672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 33, 36, 31, 32, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 35, 34, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010068416595458984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 34, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33, 35, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0011398792266845703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 36, 35, 31, 30, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 36, 34, 37, 35, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011949539184570312, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 36, 33, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 34, 32, 37, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010089874267578125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005655765533447266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 37, 34, 33, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009930133819580078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": false, "time": 8.893013000488281e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 37, 30, 36, 31, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009889602661132812, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013930797576904297, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009462833404541016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 30, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009038448333740234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 36, 33, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35, 30, 33, 29, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010199546813964844, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013930797576904297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0011949539184570312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 31, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015537738800048828, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009927749633789062, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010018348693847656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 30, 36, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 29, 35, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 31, 33, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 29, 31, 30, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011248588562011719, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 35, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014858245849609375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010869503021240234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005655765533447266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013930797576904297, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 36, 33, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009248256683349609, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 35, 30, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0061419010162353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 30, 34, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009627342224121094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 34, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009968280792236328, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 35, 32, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 35, 34, 36, 37, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010361671447753906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 31, 30, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010497570037841797, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006850004196166992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 30, 34, 35, 31, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011262893676757812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015401840209960938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011968612670898438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 31, 30, 32, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001191854476928711, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010571479797363281, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 30, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 33, 29, 34, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010418891906738281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37, 36, 35, 29, 30, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006849050521850586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013270378112792969, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 37, 33, 30, 34, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 34, 30, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013720989227294922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 30, 36, 31, 32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010180473327636719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009462833404541016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 31, 33, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009319782257080078, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015401840209960938, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 34, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012691020965576172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 33, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008978843688964844, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 37, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010180473327636719, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010080337524414062, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 37, 35, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009908676147460938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 29, 35, 37, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008819103240966797, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 33, 34, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009629726409912109, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013818740844726562, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010857582092285156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 32, 36, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012881755828857422, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 36, 31, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010089874267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 30, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014619827270507812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 31, 33, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009920597076416016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014858245849609375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 30, 34, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001062154769897461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": false, "time": 8.893013000488281e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 32, 35, 30, 34, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009529590606689453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 37, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010030269622802734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 33, 35, 30, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009770393371582031, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 35, 37, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001188039779663086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005502939224243164, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 32, 33, 37, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009472370147705078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013859272003173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 33, 35, 30, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 37, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009667873382568359, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 34, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009217262268066406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 29, 31, 32, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36, 34, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010921955108642578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010097026824951172, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 35, 32, 34, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001207113265991211, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010089874267578125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 30, 33, 32, 31, 29, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 31, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 30, 29, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009710788726806641, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 35, 36, 37, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009331703186035156, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 37, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012900829315185547, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 37, 32, 30, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012679100036621094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33, 35, 31, 36, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010221004486083984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 36, 34, 33, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009958744049072266, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0061419010162353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 29, 30, 33, 35, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009391307830810547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 31, 36, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014040470123291016, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 29, 30, 37, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010139942169189453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014598369598388672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 32, 33, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001032114028930664, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009529590606689453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014858245849609375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012831687927246094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 37, 34, 31, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009140968322753906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 34, 35, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009453296661376953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 31, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 37, 36, 33, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 29, 35, 30, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 30, 37, 36, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014598369598388672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 32, 36, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005342006683349609, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 32, 30, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009591579437255859, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0061419010162353516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 35, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013298988342285156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013270378112792969, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 36, 32, 31, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000997304916381836, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 37, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010302066802978516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 33, 36, 31, 32, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 33, 35, 37, 30, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 31, 36, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 31, 36, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014040470123291016, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010857582092285156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015401840209960938, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 36, 32, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009317398071289062, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 32, 31, 29, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010230541229248047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 31, 29, 35, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 36, 34, 32, 30, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008640289306640625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 29, 32, 35, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012559890747070312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014340877532958984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 31, 33, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013818740844726562, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 29, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 31, 34, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009598731994628906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 34, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009968280792236328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010857582092285156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 37, 31, 33, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009138584136962891, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010662078857421875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014171600341796875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001007080078125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005251169204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010390281677246094, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 31, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 37, 31, 33, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 35, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30, 36, 31, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014858245849609375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010097026824951172, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001255035400390625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 36, 33, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0015270709991455078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 37, 34, 35, 32, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 37, 36, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012552738189697266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 35, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010097026824951172, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014560222625732422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009860992431640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 32, 36, 31, 33, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 35, 32, 30, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000949859619140625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 32, 36, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010030269622802734, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 37, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00133514404296875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 33, 35, 30, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 32, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30, 36, 31, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 36, 34, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 35, 31, 30, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0011441707611083984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 35, 34, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013921260833740234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 36, 32, 31, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000997304916381836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 31, 36, 29, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009219646453857422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 35, 32, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010831356048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 29, 36, 33, 30, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 33, 32, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 30, 29, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009751319885253906, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 30, 34, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009627342224121094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 37, 35, 36, 34, 33, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009510517120361328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012049674987792969, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010097026824951172, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 36, 34, 35, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009930133819580078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 35, 29, 33, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009510517120361328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 37, 30, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 34, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010502338409423828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 30, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009627342224121094, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014560222625732422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006909847259521484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 32, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 30, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014619827270507812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 35, 33, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012841224670410156, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 37, 33, 30, 34, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 31, 36, 37, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010068416595458984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 37, 34, 35, 32, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009598731994628906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012881755828857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013930797576904297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32, 37, 29, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008978843688964844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33, 35, 31, 36, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005502939224243164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005502939224243164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 37, 34, 29, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 36, 29, 33, 30, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010700225830078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005502939224243164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005342006683349609, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 32, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010151863098144531, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 29, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0011188983917236328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0011210441589355469, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 36, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011930465698242188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001331329345703125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 34, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009670257568359375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 32, 29, 30, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008797645568847656, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012881755828857422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010857582092285156, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 33, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012521743774414062, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 36, 33, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 35, 29, 33, 32, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010402202606201172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 34, 30, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013720989227294922, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009570121765136719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014340877532958984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001422882080078125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 37, 30, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005259990692138672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 31, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001331329345703125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 34, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009968280792236328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 37, 30, 29, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009605884552001953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 31, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30, 35, 29, 34, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009281635284423828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29, 36, 33, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010669231414794922, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 29, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 37, 32, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 34, 32, 36, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009198188781738281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010080337524414062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 29, 35, 37, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008819103240966797, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29, 36, 34, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005955219268798828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 33, 32, 31, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011899471282958984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 34, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009458065032958984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 34, 29, 30, 35, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009570121765136719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 30, 34, 37, 31, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010418891906738281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013527870178222656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 31, 29, 33, 30, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009560585021972656, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 35, 34, 30, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 34, 30, 33, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008912086486816406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 33, 32, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010209083557128906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 36, 29, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009877681732177734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37, 32, 31, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001148223876953125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 33, 36, 31, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = math.sqrt(random.uniform(0, 1))\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010731220245361328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011148452758789062, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 36, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013527870178222656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 30, 29, 36, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 33, 35, 30, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009770393371582031, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 37, 34, 31, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009140968322753906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 36, 34, 35, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009930133819580078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005251169204711914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 33, 36, 31, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014081001281738281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 36, 34, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012519359588623047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 33, 31, 36, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010309219360351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 30, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0011708736419677734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 37, 36, 30, 34, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009551048278808594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0015382766723632812, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 30, 36, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009238719940185547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010700225830078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 31, 29, 34, 35, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014431476593017578, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 35, 31, 37, 32, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.uniform(0, RADIUS)\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001013040542602539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 30, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001184225082397461, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001399993896484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 35, 32, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 30, 36, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012519359588623047, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 32, 35, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010390281677246094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 31, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 29, 32, 35, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 31, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 33, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012121200561523438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008800029754638672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 34, 30, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010161399841308594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 37, 31, 36, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010581016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 35, 29, 34, 30, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009601116180419922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 29, 31, 35, 32, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008699893951416016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008819103240966797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(0, 1)\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001199960708618164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 29, 32, 35, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 37, 29, 30, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013968944549560547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 33, 36, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010211467742919922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 32, 36, 30, 34, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009059906005859375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014340877532958984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015401840209960938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 31, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009810924530029297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 33, 30, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010449886322021484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 30, 36, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013818740844726562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 30, 37, 36, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 29, 34, 33, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010230541229248047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 34, 31, 36, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005259990692138672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 36, 33, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005342006683349609, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011432170867919922, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 32, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010097026824951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30, 36, 31, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 29, 33, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009970664978027344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 31, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001132965087890625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010571479797363281, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 33, 35, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008740425109863281, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 36, 35, 32, 30, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0012590885162353516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009846687316894531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001331329345703125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013930797576904297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 35, 30, 36, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009489059448242188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014858245849609375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 31, 30, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 31, 30, 32, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.gauss(0, 1)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001191854476928711, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 30, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009038448333740234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 37, 31, 29, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014688968658447266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009338855743408203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013270378112792969, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013270378112792969, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 35, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009250640869140625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009920597076416016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014340877532958984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014939308166503906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 30, 37, 36, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009510517120361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 37, 30, 35, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 30, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009038448333740234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012888908386230469, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 34, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009968280792236328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0038411617279052734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 30, 32, 37, 29, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009462833404541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 35, 30, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 30, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014619827270507812, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 35, 34, 36, 37, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010361671447753906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": false, "time": 8.893013000488281e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 30, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = [0] * n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001104116439819336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31, 34, 36, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009791851043701172, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 29, 31, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009970664978027344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 33, 32, 34, 29, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014858245849609375, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 31, 34, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009598731994628906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0014128684997558594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006849050521850586, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 37, 33, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00133514404296875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009138584136962891, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 37, 30, 33, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 29, 37, 32, 36, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 29, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010259151458740234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 31, 35, 29, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009601116180419922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 36, 30, 37, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000965118408203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009920597076416016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008819103240966797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009539127349853516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010662078857421875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = (RADIUS + math.pi) * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010211467742919922, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 31, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001474142074584961, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001420736312866211, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 33, 36, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009911060333251953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005342006683349609, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 35, 32, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010831356048583984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 30, 36, 33, 34, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 31, 33, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001039266586303711, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 37, 31, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 32, 30, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001252889633178711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 29, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009248256683349609, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015401840209960938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 34, 32, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009670257568359375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 32, 30, 31, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0012068748474121094, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005655765533447266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 36, 35, 30, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010268688201904297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 35, 30, 36, 29, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009489059448242188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 35, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010890960693359375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 34, 31, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009548664093017578, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 30, 33, 36, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 32, 31, 36, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 30, 34, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009627342224121094, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0053310394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 30, 36, 31, 32, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010180473327636719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 33, 32, 34, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009551048278808594, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = math.sin(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010256767272949219, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 31, 36, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.000993967056274414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001033782958984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 31, 33, 35, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = (x ** 2 + y ** 2) ** 0.5\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.001039266586303711, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 37, 32, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() ** 0.5\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 37, 33, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009317398071289062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 34, 33, 35, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.sin(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0008771419525146484, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004323720932006836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 36, 32, 31, 29, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.000997304916381836, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006142139434814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 36, 31, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009672641754150391, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 31, 36, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009198188781738281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 32, 30, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010228157043457031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 35, 31, 29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 31, 29, 34, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0010082721710205078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 29, 35, 30, 34, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006849050521850586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS * 0.2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.006909847259521484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 35, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 31, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013930797576904297, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 36, 34, 35, 32, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009930133819580078, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015358924865722656, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.004801034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0013971328735351562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35, 33, 37, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001199960708618164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 31, 34], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = math.sqrt(random.random())\n        x = math.cos(theta) * r\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009520053863525391, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = (2 * random.random()) ** (1 / 2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0061419010162353516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008859634399414062, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0047838687896728516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 31, 35, 34, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0013928413391113281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 29, 32, 34, 37, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 33, 36, 30, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x*x + y*y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.005342006683349609, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001497030258178711, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 31, 34, 32, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0009598731994628906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0015101432800292969, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 37, 36, 32, 35, 29, 33], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, math.pi * 2)\n        r = random.random() * RADIUS\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001007080078125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 33, 31, 30, 34, 35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = random.gauss(RADIUS, RADIUS/2)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0011968612670898438, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x * x + y * y)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.003999948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 33, 32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = random.uniform(0, RADIUS)\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010662078857421875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 37, 34, 30, 36, 31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2 * math.pi)\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x ** 2 + y ** 2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 29, 30], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.uniform(0, 2*math.pi)\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.hypot(x, y)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0014560222625732422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.00436091423034668, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = random.random() * 2 * math.pi\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.0039119720458984375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import math\nimport random\nimport statistics\n\n# Constants\nRADIUS = 5\n\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Requirements:\n    - math\n    - random\n    - statistics\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    distances = []\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * random.random()\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n    return round(statistics.mean(distances), 4)", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
