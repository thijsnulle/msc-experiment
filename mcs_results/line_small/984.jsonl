{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 30, 35, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.9930951595306396, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 36, 31, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 31, 32, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.9277987480163574, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [34, 32, 35, 31, 36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 34, 33, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9890329837799072, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 37, 32, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.834618091583252, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 32, 30, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30, 33, 37, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 1.0753252506256104, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 30, 31, 35, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 37, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8800888061523438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 31, 36, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 34, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.00184965133667, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9027800559997559, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 30, 37, 35, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2417449951171875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 32, 30, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2124311923980713, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36, 37, 33, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 36, 35, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8351109027862549, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21645808219909668, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 31, 34, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 36, 35, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8351109027862549, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 30, 36, 34, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.040489912033081, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 35, 31, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.8944330215454102, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 35, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 30, 32, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 30, 33, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 30, 33, 32, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 1.00140380859375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 37, 31, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 33, 31, 37, 32, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 31, 36, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 31, 35, 36, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 31, 30, 35, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8842258453369141, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0820438861846924, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 30, 32, 34, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 33, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8322420120239258, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 37, 36, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0036962032318115, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 33, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 32, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.095757007598877, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [37, 36, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 33, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.0858969688415527, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.21605491638183594, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 31, 37, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37, 32, 31, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8264830112457275, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 30, 32, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 33, 34, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.0662541389465332, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36, 35, 32, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8843958377838135, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 30, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 36, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 30, 33, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [31, 36, 30, 34, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.836871862411499, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 30, 31, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 30, 36, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 33, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 30, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 36, 34, 30, 32, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37, 31, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9027800559997559, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 30, 37, 31, 33, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.0747079849243164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 37, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21297192573547363, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 31, 32, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 36, 32, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 36, 35, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21645808219909668, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 33, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 33, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.8824992179870605, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 34, 31, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 36, 35, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8351109027862549, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 31, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30, 35, 31, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 1.0050251483917236, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [35, 32, 30, 36, 37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 36, 30, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 37, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32, 35, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 36, 34, 30, 31, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 30, 35, 34, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 36, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.9204940795898438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 36, 32, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 31, 30, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.002898931503296, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [33, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8842258453369141, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 31, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 32, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21349811553955078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 33, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8927500247955322, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 30, 37, 31, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 31, 32, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 30, 32, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0847859382629395, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2417449951171875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 32, 31, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8264830112457275, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 34, 37, 31, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 36, 30, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 37, 30, 35, 31, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 32, 33, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [34, 32, 37, 36, 33, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 37, 30, 34, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.002898931503296, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009184837341308594, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [32, 30, 36, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.8220012187957764, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 36, 35, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8351109027862549, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2124311923980713, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 33, 31, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0384130477905273, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [35, 33, 36, 34, 31, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8854999542236328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 37, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 30, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37, 34, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 31, 33, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 37, 33, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 32, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 32, 36, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.9857511520385742, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 37, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 32, 37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8210597038269043, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32, 36, 30, 31, 33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 33, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 30, 32, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 31, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.9294679164886475, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 34, 32, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 36, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37, 31, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.9877631664276123, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 34, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32, 33, 37, 30, 36, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37, 32, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.834618091583252, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 33, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.8191187381744385, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 32, 37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0499839782714844, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 30, 37, 31, 32, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 32, 30, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [37, 34, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 1.0050251483917236, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 31, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.0662541389465332, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 37, 34, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.8715212345123291, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 37, 32, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 34, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 34, 32, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 32, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36, 35, 33, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36, 37, 31, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 1.1090989112854004, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [37, 33, 34, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 32, 31, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 37, 31, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21457481384277344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 33, 32, 34, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 32, 31, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 37, 36, 31, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 30, 36, 33, 31, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.002898931503296, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 35, 32, 30, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.8192839622497559, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 33, 35, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 36, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 1.0396909713745117, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 30, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 36, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8845288753509521, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 34, 32, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 32, 37, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 34, 30, 33, 32, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 35, 37, 33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9863321781158447, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 34, 36, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 35, 37, 31, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.9877631664276123, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.0747079849243164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.8219959735870361, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 34, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 34, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 30, 34, 32, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 32, 35, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 36, 30, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 30, 36, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.9204940795898438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 32, 31, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [33, 37, 36, 32, 35, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 37, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 1.0941753387451172, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [31, 34, 33, 32, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2124311923980713, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 35, 34, 36, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.82358717918396, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 35, 31, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.8944330215454102, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 34, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.8262419700622559, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.23032593727111816, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 37, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21297192573547363, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 37, 35, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.060626745223999, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 37, 32, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33, 32, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 32, 31, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 30, 37, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8849470615386963, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 34, 36, 31, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 36, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.995614767074585, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 34, 31, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 37, 32, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.834618091583252, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 30, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 37, 34, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.8905422687530518, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 30, 36, 32, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0847859382629395, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 34, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 35, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 34, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 37, 33, 31, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 30, 35, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.9930951595306396, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 35, 30, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 31, 35, 36, 32, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0341219902038574, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 33, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 31, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8178679943084717, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 35, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 34, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21349811553955078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 35, 33, 32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [30, 37, 31, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [31, 32, 35, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.0484087467193604, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 31, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 30, 34, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 35, 33, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.8274760246276855, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 32, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 31, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0319678783416748, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8842258453369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 37, 32, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.834618091583252, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 34, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 36, 31, 34, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.8912689685821533, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 35, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 30, 37, 34, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8322420120239258, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 37, 31, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8355920314788818, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 30, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2417449951171875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 37, 30, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 30, 36, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.9204940795898438, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8842258453369141, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9027800559997559, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9027800559997559, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 30, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9836552143096924, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21179986000061035, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 37, 30, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9358432292938232, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.21605491638183594, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 30, 32, 34, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0847859382629395, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37, 32, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.834618091583252, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 37, 34, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.8715212345123291, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 37, 32, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 31, 37, 32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8843958377838135, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 30, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 32, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 35, 32, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 36, 33, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.9997780323028564, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.8275747299194336, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.2061519622802734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9262290000915527, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2129840850830078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 32, 30, 34, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 37, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 31, 33, 37, 34, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.8715212345123291, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 33, 32, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8842258453369141, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 36, 33, 32, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.9947299957275391, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 33, 30, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 36, 30, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.9088099002838135, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.040489912033081, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21349811553955078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.06172513961792, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 36, 32, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35, 34, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 31, 36, 32, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33, 30, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8378288745880127, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22542810440063477, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 37, 32, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 31, 32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.06172513961792, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21645808219909668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8210597038269043, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 34, 35, 33, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.0498218536376953, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 31, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0319678783416748, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 34, 31, 30, 33, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.8353190422058105, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37, 32, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 34, 37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8210597038269043, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.06172513961792, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 33, 30, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 30, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 30, 33, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 33, 36, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22542810440063477, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 30, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 37, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31, 37, 33, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.8670110702514648, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0618290901184082, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 33, 37, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22028326988220215, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 37, 36, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0036962032318115, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [33, 34, 30, 37, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30, 34, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22739720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 6.694930791854858, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 35, 34, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2124311923980713, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 30, 34, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.407059907913208, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 35, 33, 37, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 36, 31, 32, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8322420120239258, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2417449951171875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8843958377838135, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 37, 30, 35, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 31, 36, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 33, 31, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0384130477905273, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36, 33, 35, 37, 31, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [30, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.0662541389465332, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 34, 32, 35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 1.0728771686553955, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 33, 36, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22028326988220215, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 31, 33, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 37, 34, 31, 36, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 33, 36, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8322420120239258, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 32, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [34, 36, 37, 33, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 36, 33, 31, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 1.0233511924743652, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36, 35, 32, 31, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 36, 35, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8351109027862549, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 30, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8614640235900879, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.23032593727111816, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 30, 34, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22542810440063477, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [30, 36, 33, 32, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 30, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 30, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 34, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 34, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 35, 36, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [32, 36, 30, 35, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21645808219909668, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21349811553955078, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.22028326988220215, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 35, 32, 33, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.1380798816680908, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 34, 30, 36, 35, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8351109027862549, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21297192573547363, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 31, 33, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.002898931503296, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34, 37, 35, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.9027800559997559, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 30, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.8512730598449707, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.002898931503296, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [35, 33, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 1.0685482025146484, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [34, 33, 31, 37, 30, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 34, 37, 36, 32, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 30, 35, 34, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32, 36, 35, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 31, 36, 33, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='g')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 35, 34, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 36, 37, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21179986000061035, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 37, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 1.0941753387451172, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36, 37, 34, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 34, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 30, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 31, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.8219959735870361, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 31, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy().reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.8419837951660156, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.2124311923980713, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21645808219909668, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 32, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 37, 35, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37, 33, 35, 36, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 37, 32, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 33, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 30, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 36, 35, 31, 32, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.20275497436523438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 33, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 30, 33, 31, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 36, 32, 37, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[[x_column]]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 32, 33, 31, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32, 36, 33, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.0747079849243164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 32, 33, 31, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 31, 36, 37, 30, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 35, 33, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34, 32, 37, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 31, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8210597038269043, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 33, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'red')\n    return ax", "compilation_passed": true, "time": 0.22794699668884277, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [32, 35, 31, 30, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 33, 34, 35, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 1.0662541389465332, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 33, 31, 36, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 36, 35, 34, 32, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red', linewidth=1)\n    return ax", "compilation_passed": true, "time": 1.0452570915222168, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32, 30, 37, 35, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 34, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 34, 37, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.901932954788208, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 34, 32, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 37, 33, 30, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 36, 35, 37, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30, 37, 32, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='green')\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 33, 30, 31, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 36, 30, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(4, 3))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31, 30, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.013566017150878906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.002898931503296, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36, 34, 33, 35, 37, 31, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.9090790748596191, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 30, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 33, 32, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 37, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 30, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color=\"black\")\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21457481384277344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009068965911865234, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.2433762550354004, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.2358391284942627, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 36, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.8845288753509521, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 30, 36, 35, 32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].to_numpy()\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 34, 33, 36, 37, 30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values[:, np.newaxis]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.21902990341186523, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 37, 36, 31, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 1.0036962032318115, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 1.0272529125213623, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32, 30, 33, 36, 35, 31, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape((-1, 1))\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 33, 31, 30, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='green')\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9778831005096436, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, c='r')\n    return ax", "compilation_passed": true, "time": 0.21215391159057617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 36, 35, 30, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 30, 34, 31, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.21857690811157227, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 36, 33, 32, 30, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values.reshape(-1, 1)\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, 'r')\n    return ax", "compilation_passed": true, "time": 0.9947299957275391, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column]\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='red')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression()\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.009466886520385742, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [37, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(df[x_column], df[y_column])\n    ax.plot(X, Y_pred, color=\"red\")\n    return ax", "compilation_passed": true, "time": 0.9052920341491699, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 30, 35, 32, 31], "result": {"code": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n\n    Parameters:\n    df (DataFrame): The input pandas DataFrame.\n    x_column (str): The column name for the x-axis. Data contained in column must be numeric.\n    y_column (str): The column name for the y-axis. Data contained in column must be numeric.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\n\n    Requirements:\n    - matplotlib\n    - sklearn\n\n    Notes:\n    - After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\n\n    Example:\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [2, 3, 4]})\n    >>> ax = task_func(df, 'A', 'B')\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    X = df[x_column].values\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color='r')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
