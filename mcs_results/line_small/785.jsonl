{"selected_lines": [35, 31, 28, 46, 32, 39, 42, 36, 38, 29, 33, 44, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001771688461303711, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 32, 44, 36, 33, 31, 28, 38, 46, 42, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 37, 45, 32, 42, 38, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 46, 45, 29, 31, 42, 37, 35, 32, 39, 44, 40, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 42, 36, 35, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39, 45, 36, 38, 28, 32, 37, 35, 44, 33, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 39, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0013091564178466797, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 33, 32, 38, 39, 45, 36, 44, 35, 31, 46, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.216278076171875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 40, 42, 28, 45, 36, 44, 37, 29, 46, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 33, 44, 42, 37, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 44, 37, 32, 45, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 37, 36, 42, 46, 35, 44, 45, 29, 32, 33, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21845507621765137, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 42, 37, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.09844231605529785, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [42, 35, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 36, 40, 37, 39, 46, 28, 33, 29, 35, 44, 42, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 42, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08972597122192383, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 37, 31, 39, 29, 44, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07729816436767578, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 31, 38, 33, 29, 39, 35, 40, 45, 46, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 40, 38, 36, 35, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 42, 37, 39, 35, 45, 46, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07838177680969238, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [33, 29, 40, 45, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 37, 42, 28, 36, 32, 40, 31, 35, 39, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 28, 38, 37, 40, 35, 46, 44, 42, 33, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.221390962600708, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 46, 44, 33, 38, 36, 29, 40, 28, 35, 32, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 33, 37, 39, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 44, 45, 46, 35, 29, 31, 32, 33, 42, 36, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 29, 45, 35, 28, 33, 42, 44, 31, 39, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 45, 32, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0778188705444336, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 42, 28, 33, 39, 38, 45, 29, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 33, 28, 44, 31, 37, 40, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 36, 45, 39, 35, 32, 42, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 42, 46, 29, 37, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07400202751159668, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [35, 44, 37, 46, 33, 45, 31, 40, 28, 38, 29, 36, 39, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 39, 44, 33, 31, 45, 42, 28, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 45, 42, 29, 36, 35, 31, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 29, 44, 40, 33, 35, 46, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21964478492736816, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 32, 33, 42, 38, 39, 28, 46, 36, 44, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07639026641845703, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 37, 36, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07573509216308594, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 29, 39, 46, 31, 38, 32, 42, 44, 28, 33, 40, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 46, 31, 32, 28, 40, 39, 35, 29, 33, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return False\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 28, 38, 44, 37, 40, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07773208618164062, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 37, 33, 40, 29, 39, 28, 42, 32, 38, 45, 35, 31, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 38, 32, 37, 36, 29, 28, 40, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07406497001647949, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [39, 40, 36, 44, 37, 32, 46, 45, 28, 31, 35, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 36, 32, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07588887214660645, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [40, 36, 45, 35, 38, 31, 29, 39, 28, 33, 46, 32, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 32, 33, 44, 37, 39, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07541704177856445, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 46, 32, 38, 35, 44, 31, 42, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07770419120788574, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 46, 31, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07555103302001953, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 32, 33, 39, 36, 44, 28, 42, 29, 38, 45, 31, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 35, 40, 44, 33, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 31, 45, 38, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 35, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 44, 33, 46, 38, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 44, 39, 38, 36, 29, 45, 46, 40, 32, 37, 35, 33, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 29, 36, 37, 45, 39, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 32, 29, 37, 35, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08179783821105957, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 35, 31, 44, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07639479637145996, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 39, 29, 37, 45, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07353878021240234, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 38, 37, 31, 46, 42, 28, 39, 44, 29, 35, 33, 45, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 46, 45, 42, 36, 37, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 31, 37, 32, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07576203346252441, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 32, 40, 31, 33, 39, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 29, 40, 39, 36, 45, 42, 28, 44, 37, 35, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 29, 35, 44, 45, 37, 42, 33, 28, 38, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21805596351623535, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 31, 37, 28, 40, 46, 45, 36, 39, 38, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 29, 31, 33, 28, 45, 42, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 44, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07765793800354004, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 45, 44, 33, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 38, 46, 32, 37, 36, 42, 28, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 38, 32, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07391214370727539, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22583866119384766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2284839153289795, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 45, 40, 39, 42, 44, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07950496673583984, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 42, 29, 36, 32, 35, 46, 28, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07953310012817383, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 44, 35, 32, 28, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 35, 42, 31, 39, 36, 37, 32, 44, 45, 46, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07568073272705078, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 42, 46, 44, 40, 28, 29, 32, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 37, 39, 38, 40, 32, 31, 33, 28, 45, 44, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07354187965393066, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 45, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07349610328674316, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 28, 37, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08172392845153809, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 28, 36, 29, 33, 44, 37, 46, 35, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.24158382415771484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 44, 31, 29, 45, 37, 40, 32, 42, 39, 46, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 42, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 44, 28, 29, 35, 33, 38, 39, 46, 45, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 42, 46, 36, 39, 37, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 31, 32, 35, 29, 38, 40, 39, 46, 45, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 28, 46, 33, 45, 38, 31, 39, 29, 35, 32, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 46, 28, 32, 36, 35, 33, 40, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 36, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 35, 28, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 35, 29, 36, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21901679039001465, "tests_passed": true, "error": null}}
{"selected_lines": [46, 28, 37, 40, 32, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08467698097229004, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21904206275939941, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 44, 29, 32, 45, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 44, 33, 37, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 38, 40, 29, 31, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 31, 28, 46, 39, 29, 40, 42, 35, 44, 36, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 42, 36, 46, 44, 38, 31, 32, 45, 39, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if len(file_list) == 0:\n        return False\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21749114990234375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 39, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07342100143432617, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0767669677734375, "tests_passed": true, "error": null}}
{"selected_lines": [45, 38, 37, 40, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07575178146362305, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 45, 31, 38, 44, 40, 32, 42, 28, 29, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07572674751281738, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 36, 33, 39, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 44, 32, 36, 33, 31, 37, 39, 40, 46, 35, 28, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 28, 35, 45, 31, 37, 40, 38, 36, 46, 44, 33, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 32, 28, 45, 37, 31, 44, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 33, 42, 31, 37, 36, 29, 38, 40, 45, 35, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 28, 31, 32, 33, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 40, 29, 42, 31, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 42, 33, 39, 31, 46, 28, 29, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 33, 29, 28, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42, 46, 39, 40, 37, 35, 29, 32, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 39, 42, 29, 32, 38, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 38, 33, 40, 42, 29, 31, 46, 45, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 45, 39, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 46, 40, 35, 37, 44, 36, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07720494270324707, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 40, 36, 33, 35, 29, 31, 32, 38, 37, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 46, 39, 31, 44, 29, 35, 38, 40, 37, 36, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 38, 36, 46, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07399201393127441, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 44, 42, 35, 33, 38, 28, 40, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 42, 37, 36, 28, 44, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0791780948638916, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [45, 35, 42, 40, 33, 32, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 45, 39, 31, 42, 35, 40, 46, 29, 44, 36, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 37, 31, 35, 39, 45, 44, 33, 46, 38, 42, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 42, 37, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07696676254272461, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [42, 44, 32, 46, 29, 45, 33, 35, 40, 38, 36, 39, 37, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38, 45, 37, 29, 28, 39, 42, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21776795387268066, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 29, 36, 32, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001984119415283203, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 38, 29, 28, 44, 35, 32, 37, 42, 40, 36, 46, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21974778175354004, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 32, 38, 40, 42, 31, 45, 36, 44, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 36, 37, 29, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08069992065429688, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22179603576660156, "tests_passed": true, "error": null}}
{"selected_lines": [45, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019159317016601562, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 38, 33, 45, 28, 31, 46, 42, 44, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.073699951171875, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 37, 31, 44, 35, 36, 45, 33, 46, 38, 32, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 35, 36, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07864904403686523, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 40, 35, 32, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 35, 36, 46, 32, 28, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 44, 32, 36, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018961429595947266, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 39, 46, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07676911354064941, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 28, 33, 31, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 31, 46, 38, 42, 37, 29, 32, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 32, 42, 36, 45, 46, 35, 40, 38, 37, 29, 39, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 29, 32, 28, 36, 42, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0812520980834961, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [39, 37, 44, 35, 40, 29, 36, 33, 45, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15974092483520508, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 45, 28, 36, 35, 42, 37, 39, 29, 44, 31, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = f'{archive_file_base}.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 37, 36, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 28, 39, 32, 29, 31, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0755157470703125, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [33, 28, 36, 35, 31, 42, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 29, 31, 36, 44, 40, 45, 46, 38, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 32, 39, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0030469894409179688, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21904206275939941, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.23907899856567383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 29, 31, 40, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07470011711120605, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 39, 32, 38, 44, 28, 40, 36, 31, 46, 42, 45, 35, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 42, 45, 32, 44, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07540011405944824, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22080016136169434, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 38, 42, 36, 32, 40, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22510004043579102, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 42, 28, 44, 45, 37, 38, 36, 32, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 33, 37, 44, 45, 29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07701873779296875, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [28, 33, 32, 45, 37, 38, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 33, 35, 42, 36, 31, 28, 32, 45, 29, 44, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07567310333251953, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 38, 37, 39, 46, 45, 31, 32, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07562112808227539, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 38, 46, 45, 44, 39, 28, 31, 32, 29, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15974092483520508, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21974778175354004, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22310709953308105, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 32, 39, 37, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.002222776412963867, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [46, 36, 32, 31, 28, 45, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001483917236328125, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 46, 39, 31, 36, 38, 29, 35, 32, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 38, 33, 32, 36, 37, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31, 35, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07628607749938965, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 46, 28, 35, 42, 40, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 42, 33, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.24158382415771484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 39, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 28, 42, 31, 36, 33, 32, 44, 39, 38, 37, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.221390962600708, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 39, 32, 38, 42, 37, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 44, 37, 40, 42, 46, 32, 33, 31, 29, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 40, 28, 35, 29, 46, 45, 39, 44, 42, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 37, 44, 39, 28, 33, 35, 32, 40, 31, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 38, 40, 37, 39, 46, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07501697540283203, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 38, 37, 39, 42, 33, 44, 40, 36, 45, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42, 31, 37, 39, 40, 35, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2178502082824707, "tests_passed": true, "error": null}}
{"selected_lines": [44, 32, 35, 29, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07514810562133789, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 29, 38, 39, 37, 28, 36, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07363271713256836, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 46, 36, 28, 42, 40, 37, 39, 45, 33, 32, 44, 38, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 29, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 45, 38, 32, 29, 46, 44, 40, 33, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 44, 37, 32, 46, 40, 45, 33, 38, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 39, 37, 29, 42, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07686829566955566, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 45, 42, 46, 31, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 31, 29, 37, 36, 46, 42, 39, 35, 45, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07573628425598145, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 44, 39, 46, 32, 38, 36, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 28, 40, 45, 39, 42, 44, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 46, 39, 36, 37, 33, 42, 45, 28, 32, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 45, 44, 46, 28, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07516098022460938, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 29, 36, 38, 46, 32, 42, 28, 33, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 45, 29, 39, 40, 33, 38, 42, 46, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0760030746459961, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 32, 33, 31, 40, 28, 37, 46, 29, 42, 35, 44, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 33, 44, 31, 45, 38, 39, 36, 28, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 33, 28, 39, 35, 38, 42, 32, 45, 37, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [44, 31, 35, 40, 45, 29, 42, 39, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07747507095336914, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 29, 39, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0013091564178466797, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 44, 40, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018889904022216797, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 39, 36, 29, 45, 40, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07500600814819336, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 46, 32, 39, 31, 44, 42, 35, 33, 36, 28, 45, 38, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 45, 44, 38, 40, 46, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07347631454467773, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 39, 38, 32, 33, 45, 42, 29, 40, 28, 31, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 32, 28, 35, 37, 42, 44, 39, 45, 36, 33, 29, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 28, 29, 40, 36, 44, 32, 45, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 40, 45, 33, 35, 32, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07702922821044922, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 32, 42, 46, 31, 33, 39, 35, 28, 37, 40, 45, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001895904541015625, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 32, 40, 42, 37, 35, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 46, 29, 31, 36, 42, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 40, 28, 36, 33, 31, 38, 44, 39, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07521295547485352, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 28, 42, 39, 32, 31, 35, 40, 29, 38, 37, 45, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07721686363220215, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 36, 38, 45, 42, 29, 35, 44, 39, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": false, "time": 0.0007228851318359375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 45, 36, 46, 42, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 38, 40, 29, 36, 45, 33, 39, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.009038209915161133, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22100281715393066, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.23227381706237793, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 39, 28, 38, 44, 46, 42, 35, 32, 36, 37, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 28, 37, 45, 36, 42, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 33, 39, 28, 40, 36, 31, 32, 29, 46, 44, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 46, 39, 42, 36, 29, 40, 44, 38, 35, 45, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22545695304870605, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 40, 38, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 46, 36, 32, 40, 37, 29, 44, 45, 38, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07399606704711914, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 45, 33, 35, 29, 40, 38, 39, 32, 28, 44, 36, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 28, 31, 33, 38, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 29, 46, 35, 45, 31, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07806611061096191, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 33, 44, 37, 42, 32, 39, 38, 29, 28, 31, 35, 46, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 36, 45, 32, 44, 33, 35, 39, 37, 29, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 33, 28, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 46, 31, 40, 39, 44, 37, 35, 36, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019042491912841797, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 38, 40, 33, 29, 45, 42, 28, 31, 35, 39, 37, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 32, 33, 37, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 45, 39, 36, 37, 42, 32, 40, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 40, 46, 37, 35, 39, 29, 42, 44, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07484221458435059, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 29, 46, 44, 28, 33, 36, 31, 45, 39, 37, 32, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 36, 42, 35, 31, 45, 37, 40, 33, 29, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 35, 36, 33, 31, 45, 38, 39, 37, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 28, 38, 44, 29, 36, 45, 42, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 39, 45, 42, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 39, 29, 33, 44, 38, 31, 35, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 42, 31, 46, 37, 35, 32, 44, 28, 38, 33, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 44, 42, 46, 40, 31, 36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07379508018493652, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.014543771743774414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 37, 45, 29, 28, 44, 31, 36, 35, 38, 46, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 29, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0756688117980957, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [32, 46, 35, 39, 37, 44, 28, 29, 42, 31, 33, 40, 38, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 35, 42, 38, 36, 37, 40, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07780003547668457, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21618103981018066, "tests_passed": true, "error": null}}
{"selected_lines": [42, 28, 39, 35, 32, 44, 36, 38, 45, 46, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018758773803710938, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [35, 42, 29, 44, 46, 31, 40, 36, 32, 45, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07856893539428711, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 32, 37, 33, 46, 36, 40, 38, 44, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31, 40, 32, 36, 29, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 28, 32, 33, 35, 40, 45, 44, 29, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 45, 42, 38, 28, 32, 35, 46, 39, 31, 37, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 39, 28, 38, 40, 44, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07381772994995117, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 36, 40, 39, 35, 45, 37, 33, 38, 31, 29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 42, 46, 44, 38, 29, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0814657211303711, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 36, 39, 33, 32, 44, 35, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 32, 37, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 31, 45, 42, 39, 36, 32, 35, 28, 40, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 31, 32, 45, 28, 36, 40, 39, 33, 46, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 28, 42, 44, 37, 45, 32, 39, 33, 35, 36, 46, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 35, 44, 39, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07576799392700195, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.012822151184082031, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 36, 42, 29, 38, 28, 31, 35, 46, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019168853759765625, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 39, 46, 32, 45, 36, 29, 37, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07454395294189453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 42, 33, 29, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21792888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 44, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07662582397460938, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 44, 28, 38, 40, 45, 33, 39, 42, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 38, 44, 39, 40, 33, 31, 46, 42, 37, 36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019021034240722656, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 40, 46, 35, 42, 39, 29, 31, 44, 33, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 31, 28, 29, 46, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 36, 46, 31, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08083319664001465, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 38, 32, 37, 44, 42, 35, 28, 46, 39, 45, 40, 31, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 32, 28, 31, 35, 36, 33, 46, 38, 39, 44, 45, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 28, 38, 44, 37, 40, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07773208618164062, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 31, 33, 28, 45, 40, 42, 36, 38, 39, 46, 29, 44, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 42, 39, 37, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07407116889953613, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 29, 28, 44, 42, 40, 39, 32, 31, 46, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018780231475830078, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 32, 35, 38, 46, 31, 29, 44, 42, 33, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 45, 36, 31, 29, 39, 37, 44, 40, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08190417289733887, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 33, 45, 28, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 32, 29, 46, 38, 39, 45, 33, 31, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07407212257385254, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 32, 39, 42, 36, 45, 37, 46, 29, 33, 35, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 31, 35, 46, 38, 44, 40, 42, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 28, 31, 32, 29, 36, 39, 44, 42, 45, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 39, 36, 46, 38, 40, 45, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08573222160339355, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 28, 29, 31, 37, 36, 45, 44, 35, 32, 33, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 42, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 46, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08578205108642578, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 38, 40, 45, 29, 31, 36, 39, 37, 44, 32, 35, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 38, 29, 33, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07645630836486816, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 33, 31, 38, 39, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 39, 44, 46, 42, 37, 38, 29, 33, 36, 45, 35, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 32, 40, 39, 28, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07680487632751465, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 37, 33, 44, 39, 38, 40, 45, 29, 36, 28, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 28, 39, 37, 42, 46, 40, 33, 31, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 38, 31, 29, 33, 45, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 29, 45, 42, 32, 33, 40, 46, 28, 31, 39, 38, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 28, 45, 29, 31, 39, 46, 36, 37, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 39, 32, 29, 42, 31, 35, 40, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 40, 29, 37, 31, 36, 38, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07600998878479004, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 45, 46, 37, 35, 28, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019378662109375, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42, 40, 33, 28, 38, 37, 32, 29, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 28, 32, 39, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07517194747924805, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [33, 44, 38, 46, 29, 36, 28, 45, 40, 35, 32, 39, 42, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 45, 36, 39, 37, 29, 42, 28, 40, 46, 31, 35, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07904505729675293, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 46, 44, 36, 38, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2184598445892334, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 45, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07405996322631836, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 44, 28, 32, 29, 37, 38, 42, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019011497497558594, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 32, 31, 35, 29, 46, 33, 38, 40, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 35, 36, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07665801048278809, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 37, 42, 28, 44, 35, 45, 40, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 46, 33, 44, 31, 32, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 46, 35, 40, 36, 33, 37, 45, 44, 32, 31, 42, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 44, 38, 35, 40, 37, 31, 45, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if len(file_list) < 1:\n        return False\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07522797584533691, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 45, 39, 29, 31, 35, 46, 40, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0776369571685791, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 42, 31, 39, 35, 44, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07496476173400879, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 38, 29, 33, 37, 32, 46, 31, 45, 28, 44, 42, 36, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08867001533508301, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 32, 37, 33, 36, 29, 38, 39, 28, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21459388732910156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 36, 31, 45, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0757448673248291, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 38, 36, 28, 46, 29, 40, 42, 39, 45, 33, 31, 37, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 45, 37, 40, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07583498954772949, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21776795387268066, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 46, 29, 38, 32, 37, 42, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 46, 32, 45, 36, 29, 37, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07454395294189453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22100281715393066, "tests_passed": true, "error": null}}
{"selected_lines": [42, 29, 31, 35, 37, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07514715194702148, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 38, 33, 29, 37, 32, 31, 39, 44, 45, 36, 40, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 44, 32, 31, 46, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 40, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 33, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21909308433532715, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 46, 32, 45, 36, 29, 37, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07454395294189453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 39, 45, 42, 33, 31, 38, 44, 28, 29, 40, 35, 46, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 44, 45, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07884383201599121, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 37, 40, 42, 32, 31, 44, 28, 33, 46, 29, 38, 36, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 46, 32, 42, 33, 40, 31, 37, 36, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 36, 44, 35, 40, 45, 46, 39, 31, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018868446350097656, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 40, 32, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 45, 37, 46, 36, 32, 38, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0015079975128173828, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 46, 31, 39, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07809019088745117, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 46, 29, 31, 32, 44, 45, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07350707054138184, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 46, 42, 35, 44, 29, 32, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07730412483215332, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 36, 33, 45, 46, 32, 29, 37, 42, 38, 31, 28, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07410502433776855, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 46, 38, 44, 33, 36, 29, 39, 42, 45, 32, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 31, 35, 42, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07604670524597168, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 46, 36, 42, 39, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0769033432006836, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 45, 42, 35, 40, 28, 31, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0753939151763916, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 45, 29, 32, 40, 36, 35, 39, 42, 37, 38, 28, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 46, 45, 31, 38, 44, 36, 29, 37, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22510004043579102, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018529891967773438, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 39, 46, 32, 33, 31, 37, 29, 35, 28, 36, 44, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 29, 35, 37, 42, 40, 38, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0015039443969726562, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 36, 29, 44, 35, 46, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07704496383666992, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 44, 32, 29, 28, 39, 46, 37, 38, 36, 35, 40, 45, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 38, 37, 44, 32, 46, 39, 33, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 46, 42, 45, 36, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 38, 33, 44, 36, 39, 35, 31, 32, 28, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 32, 33, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07383394241333008, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 36, 46, 39, 44, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 39, 32, 45, 35, 36, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 42, 29, 35, 46, 37, 44, 31, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 45, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 37, 29, 44, 36, 45, 46, 39, 28, 31, 32, 40, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 35, 32, 44, 36, 40, 31, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 28, 29, 31, 32, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0754539966583252, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21776795387268066, "tests_passed": true, "error": null}}
{"selected_lines": [33, 46, 31, 39, 35, 29, 37, 42, 45, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 29, 33, 40, 28, 36, 31, 45, 42, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 35, 28, 45, 33, 46, 31, 38, 42, 44, 36, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 44, 42, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 42, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07612419128417969, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 45, 35, 37, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0016791820526123047, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 39, 44, 28, 38, 45, 35, 37, 40, 36, 46, 33, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = f'{archive_file_base}.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 40, 37, 31, 35, 38, 44, 33, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 42, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 31, 40, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0014162063598632812, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 40, 28, 45, 31, 39, 32, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07645988464355469, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07340025901794434, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.221390962600708, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 33, 32, 35, 37, 39, 38, 44, 42, 40, 31, 28, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 31, 44, 42, 39, 36, 29, 37, 32, 38, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 39, 35, 42, 36, 46, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019919872283935547, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 33, 46, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.012333869934082031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0017690658569335938, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 35, 42, 32, 38, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 46, 32, 45, 36, 29, 37, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07454395294189453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 29, 32, 45, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07478809356689453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2184598445892334, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 40, 46, 42, 39, 33, 36, 29, 35, 45, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 40, 29, 39, 46, 45, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0766897201538086, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21792888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 44, 38, 36, 40, 29, 28, 42, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0755922794342041, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [40, 29, 44, 36, 31, 42, 32, 28, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018639564514160156, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 33, 40, 31, 38, 32, 45, 35, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 28, 45, 29, 32, 37, 40, 31, 35, 38, 42, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 42, 36, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001489877700805664, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 46, 37, 40, 44, 32, 36, 29, 42, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07647895812988281, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 39, 36, 38, 29, 35, 44, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07513189315795898, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 37, 33, 29, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 42, 28, 37, 29, 40, 33, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 42, 37, 39, 36, 35, 32, 28, 44, 31, 40, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08008027076721191, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 44, 28, 46, 31, 37, 42, 45, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 31, 35, 28, 38, 39, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001850128173828125, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39, 36, 32, 42, 37, 33, 31, 35, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 45, 44, 40, 29, 31, 38, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07507205009460449, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21792888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [46, 31, 37, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07346415519714355, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 31, 35, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07830500602722168, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 28, 31, 46, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018172264099121094, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2191929817199707, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22080016136169434, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [32, 46, 33, 38, 36, 37, 28, 44, 40, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0014269351959228516, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 42, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07479596138000488, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 39, 40, 32, 31, 42, 38, 46, 29, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 44, 33, 42, 32, 45, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 38, 44, 33, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 46, 45, 42, 37, 35, 31, 39, 36, 28, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 46, 39, 44, 42, 45, 40, 31, 38, 37, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07365894317626953, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [28, 42, 38, 40, 35, 37, 36, 29, 31, 33, 46, 44, 39, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 36, 31, 38, 35, 28, 46, 33, 40, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 35, 42, 32, 28, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 46, 29, 31, 33, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 31, 39, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [29, 46, 35, 36, 40, 37, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0761411190032959, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 40, 35, 44, 45, 38, 32, 28, 46, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 44, 35, 46, 29, 36, 38, 28, 40, 32, 33, 39, 42, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 28, 45, 35, 29, 44, 32, 36, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 46, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07972192764282227, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 40, 33, 29, 36, 32, 42, 37, 45, 46, 35, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 45, 46, 35, 31, 44, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 40, 45, 37, 32, 39, 38, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 40, 29, 28, 45, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [35, 45, 38, 33, 28, 42, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 38, 40, 32, 46, 45, 36, 35, 29, 31, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0014767646789550781, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 35, 28, 32, 36, 37, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 31, 46, 39, 38, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07601475715637207, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 32, 38, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 28, 37, 31, 35, 42, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 38, 44, 35, 31, 40, 37, 36, 32, 45, 39, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07567310333251953, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 29, 45, 42, 39, 44, 31, 46, 37, 36, 35, 32, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 46, 42, 45, 44, 35, 39, 37, 36, 31, 28, 29, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 39, 29, 38, 37, 32, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07374072074890137, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 39, 35, 44, 40, 32, 38, 36, 28, 31, 29, 42, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 33, 40, 29, 42, 44, 45, 39, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 32, 44, 37, 40, 45, 35, 28, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 31, 46, 37, 28, 35, 40, 29, 36, 42, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07893180847167969, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 33, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21904206275939941, "tests_passed": true, "error": null}}
{"selected_lines": [44, 32, 46, 42, 36, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 28, 44, 40, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f'{archive_file_base}.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07794380187988281, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 29, 45, 44, 28, 36, 33, 40, 39, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07356524467468262, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 45, 44, 28, 36, 29, 39, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019299983978271484, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [31, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 45, 42, 46, 36, 38, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07542085647583008, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [28, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08082103729248047, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 46, 37, 39, 28, 36, 44, 35, 42, 33, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 36, 32, 46, 29, 40, 35, 42, 38, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 28, 44, 45, 42, 37, 46, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07355999946594238, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 44, 31, 39, 46, 29, 45, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0020711421966552734, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 35, 37, 42, 40, 46, 38, 39, 28, 36, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 39, 40, 37, 44, 35, 33, 28, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 35, 40, 28, 39, 45, 36, 42, 31, 44, 29, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08305191993713379, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21792888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 38, 42, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 35, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07707500457763672, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 36, 37, 38, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07353496551513672, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 39, 46, 32, 45, 36, 29, 37, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07454395294189453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 42, 37, 32, 28, 38, 31, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07732772827148438, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 40, 46, 31, 39, 36, 29, 38, 37, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07362580299377441, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08821511268615723, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 31, 38, 42, 35, 29, 44, 37, 39, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07832813262939453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 35, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 35, 33, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0761861801147461, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 40, 44, 45, 35, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 32, 29, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 45, 35, 36, 29, 44, 38, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 46, 31, 29, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018429756164550781, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 44, 31, 38, 45, 36, 35, 40, 39, 42, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07601308822631836, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [35, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 36, 44, 40, 32, 28, 46, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018548965454101562, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32, 28, 35, 37, 46, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.014457225799560547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 33, 46, 38, 40, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 45, 29, 44, 28, 35, 46, 33, 39, 38, 37, 36, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 46, 40, 28, 31, 36, 39, 44, 42, 37, 32, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07684779167175293, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 33, 46, 39, 29, 31, 28, 38, 32, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 32, 46, 28, 33, 38, 39, 40, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 45, 44, 28, 35, 38, 31, 33, 40, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 42, 32, 28, 37, 40, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 28, 39, 44, 38, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 45, 33, 35, 38, 46, 37, 44, 42, 39, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 46, 32, 42, 37, 40, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07393527030944824, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 28, 35, 38, 36, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 40, 39, 35, 33, 46, 36, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 42, 32, 35, 46, 40, 28, 38, 45, 31, 36, 37, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 45, 46, 44, 35, 31, 32, 42, 40, 33, 37, 29, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 46, 32, 45, 36, 29, 37, 31, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07454395294189453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 46, 37, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07601618766784668, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 29, 28, 40, 39, 44, 35, 45, 31, 46, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07655000686645508, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 45, 40, 29, 32, 37, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07548904418945312, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 38, 40, 35, 44, 36, 39, 42, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [46, 32, 39, 35, 28, 44, 42, 31, 36, 40, 38, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018839836120605469, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 40, 42, 36, 28, 44, 32, 33, 45, 31, 29, 38, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 37, 35, 42, 29, 33, 31, 39, 46, 38, 36, 44, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 39, 37, 29, 38, 33, 36, 40, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 28, 42, 40, 36, 31, 32, 44, 29, 38, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07519268989562988, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [31, 39, 37, 28, 33, 46, 35, 45, 42, 44, 36, 29, 32, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 32, 37, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0758368968963623, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 45, 38, 40, 37, 31, 42, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.24158382415771484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 45, 38, 32, 46, 44, 42, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07680082321166992, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [45, 40, 36, 42, 35, 37, 31, 46, 28, 33, 32, 29, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 32, 44, 28, 46, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0017671585083007812, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 38, 32, 44, 45, 42, 35, 36, 29, 28, 31, 40, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return False\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07467794418334961, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 44, 42, 35, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08135294914245605, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 28, 45, 37, 33, 38, 32, 44, 46, 36, 29, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 38, 42, 28, 37, 32, 45, 46, 36, 39, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07379984855651855, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [40, 32, 33, 37, 31, 42, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 40, 45, 33, 37, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 39, 45, 33, 38, 28, 36, 37, 40, 42, 29, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21909308433532715, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 35, 39, 31, 40, 28, 38, 42, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0749518871307373, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [46, 32, 40, 29, 35, 36, 44, 37, 45, 33, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 40, 32, 35, 38, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07729101181030273, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21901679039001465, "tests_passed": true, "error": null}}
{"selected_lines": [33, 45, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 28, 33, 35, 36, 39, 31, 46, 40, 38, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.012333869934082031, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 42, 35, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 31, 36, 42, 37, 35, 44, 46, 40, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 42, 40, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 32, 38, 39, 40, 35, 31, 28, 44, 29, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 45, 38, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 28, 29, 31, 39, 45, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 45, 42, 46, 35, 33, 39, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 39, 32, 40, 42, 28, 29, 38, 36, 37, 45, 33, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 35, 40, 42, 45, 29, 37, 46, 39, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 37, 33, 29, 44, 28, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 39, 46, 42, 44, 35, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0774698257446289, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [42, 39, 31, 46, 37, 35, 33, 44, 40, 32, 28, 45, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 29, 38, 28, 42, 33, 36, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07648205757141113, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21792888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 28, 35, 37, 29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0017631053924560547, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 44, 38, 33, 36, 32, 35, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 35, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07754397392272949, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 36, 37, 45, 39, 33, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 28, 37, 39, 38, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07358002662658691, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 33, 36, 35, 45, 38, 32, 28, 42, 40, 37, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 28, 29, 44, 32, 39, 31, 37, 45, 42, 35, 33, 36, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 29, 32, 36, 31, 42, 35, 28, 40, 39, 33, 44, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018970966339111328, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 37, 29, 28, 40, 38, 39, 33, 31, 46, 35, 42, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 37, 45, 42, 28, 46, 40, 35, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 40, 29, 38, 42, 45, 44, 36, 46, 35, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 31, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07515907287597656, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2180030345916748, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 45, 33, 28, 40, 44, 29, 35, 46, 36, 32, 38, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07531499862670898, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 42, 29, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.012333869934082031, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 32, 42, 33, 44, 35, 40, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 40, 44, 33, 31, 42, 37, 32, 29, 38, 28, 35, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 46, 29, 33, 42, 39, 45, 28, 38, 40, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 46, 36, 38, 37, 32, 35, 31, 29, 42, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07945704460144043, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 46, 33, 38, 36, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 33, 32, 38, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 38, 40, 35, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.015563011169433594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 46, 40, 38, 29, 33, 31, 32, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22328495979309082, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 42, 36, 35, 44, 28, 32, 29, 38, 39, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07772016525268555, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 38, 40, 37, 32, 46, 33, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 29, 42, 45, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07637596130371094, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21985101699829102, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 42, 28, 32, 33, 31, 35, 36, 39, 29, 44, 37, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07512235641479492, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 46, 45, 39, 35, 37, 40, 38, 32, 42, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 42, 36, 44, 39, 33, 37, 28, 31, 46, 38, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 35, 39, 32, 40, 36, 28, 46, 44, 31, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 42, 31, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08043909072875977, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32, 40, 46, 44, 38, 35, 36, 39, 28, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07711315155029297, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 42, 32, 37, 28, 36, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08019614219665527, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [31, 40, 36, 28, 44, 37, 46, 32, 35, 42, 38, 39, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = f'{archive_file_base}.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0021257400512695312, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [46, 39, 36, 38, 31, 42, 44, 45, 32, 37, 35, 29, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 35, 32, 42, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07893490791320801, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2180030345916748, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 35, 46, 32, 37, 36, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07384300231933594, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 32, 31, 35, 36, 37, 46, 38, 28, 42, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07642984390258789, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 31, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 42, 33, 31, 45, 37, 44, 38, 28, 32, 35, 40, 29, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 42, 44, 31, 45, 36, 46, 28, 39, 38, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 42, 44, 40, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07494521141052246, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [36, 45, 35, 46, 38, 32, 31, 28, 39, 44, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07574129104614258, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 28, 31, 29, 44, 45, 36, 33, 46, 39, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 39, 42, 33, 44, 32, 29, 36, 31, 28, 46, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 39, 36, 42, 37, 28, 40, 29, 32, 46, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 44, 46, 31, 40, 33, 39, 28, 32, 45, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 37, 44, 42, 45, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 36, 33, 29, 45, 28, 35, 32, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 29, 44, 45, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0774989128112793, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 28, 32, 40, 37, 42, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 32, 45, 33, 46, 28, 42, 31, 40, 37, 44, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 45, 46, 31, 37, 35, 33, 28, 42, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 31, 39, 32, 28, 33, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 38, 37, 46, 29, 31, 39, 35, 44, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07388806343078613, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 28, 35, 45, 42, 36, 37, 31, 44, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22080016136169434, "tests_passed": true, "error": null}}
{"selected_lines": [42, 31, 45, 38, 39, 44, 37, 29, 33, 36, 46, 28, 40, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 40, 46, 45, 37, 32, 42, 33, 31, 29, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 42, 35, 40, 28, 32, 44, 33, 45, 36, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0763697624206543, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.012822151184082031, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 31, 36, 38, 28, 35, 32, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 28, 37, 40, 32, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08467698097229004, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 31, 36, 35, 38, 37, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07645106315612793, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 32, 39, 29, 35, 46, 44, 42, 38, 36, 45, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0814671516418457, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 39, 42, 40, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 37, 42, 31, 35, 38, 28, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.002106189727783203, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32, 45, 29, 42, 28, 38, 37, 31, 40, 35, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0738980770111084, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 36, 38, 33, 42, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 37, 39, 38, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 46, 36, 33, 42, 45, 32, 31, 35, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 42, 40, 33, 36, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 46, 44, 42, 29, 35, 32, 39, 37, 28, 33, 36, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 45, 44, 38, 40, 46, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07347631454467773, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 33, 42, 31, 29, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 42, 38, 45, 31, 37, 46, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 33, 28, 38, 35, 29, 32, 46, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 46, 40, 38, 44, 45, 35, 28, 31, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07569694519042969, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 44, 42, 35, 40, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 45, 39, 29, 31, 35, 46, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.08144283294677734, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 31, 29, 44, 38, 40, 37, 45, 32, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07400703430175781, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 35, 33, 40, 31, 46, 45, 32, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 36, 46, 35, 40, 38, 29, 31, 28, 32, 44, 37, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21506714820861816, "tests_passed": true, "error": null}}
{"selected_lines": [44, 32, 39, 36, 29, 31, 45, 35, 28, 38, 37, 33, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 36, 33, 29, 44, 31, 38, 45, 42, 46, 35, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 38, 44, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07594537734985352, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 28, 29, 35, 46, 45, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 40, 46, 31, 37, 29, 39, 44, 38, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 40, 39, 46, 42, 38, 31, 29, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.002108335494995117, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2215099334716797, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 46, 39, 42, 33, 28, 31, 36, 35, 45, 32, 29, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 37, 46, 39, 33, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2215099334716797, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 40, 28, 38, 32, 37, 31, 45, 39, 42, 33, 35, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_%Y%m%d%H%M%S'\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22100281715393066, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 45, 37, 28, 33, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07729101181030273, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 42, 38, 46, 37, 32, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07356905937194824, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 42, 37, 35, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07504105567932129, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 39, 38, 45, 33, 44, 29, 35, 31, 46, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22900891304016113, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 33, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 44, 33, 39, 28, 38, 35, 42, 40, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 29, 35, 37, 45, 33, 31, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 29, 40, 39, 37, 38, 42, 44, 31, 33, 35, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if len(file_list) == 0:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 28, 31, 42, 44, 35, 32, 40, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 37, 29, 40, 39, 33, 45, 44, 28, 31, 36, 35, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 39, 45, 42, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07369112968444824, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32, 39, 31, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07816076278686523, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 28, 39, 46, 38, 44, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07613897323608398, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 31, 38, 45, 44, 37, 28, 33, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 37, 36, 38, 35, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07757711410522461, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.23227381706237793, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 29, 46, 32, 28, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 46, 44, 45, 29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07369589805603027, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [44, 45, 31, 36, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 37, 46, 39, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21808314323425293, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 36, 29, 32, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07655096054077148, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 38, 42, 40, 29, 45, 28, 32, 35, 44, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15974092483520508, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [46, 33, 42, 32, 37, 31, 40, 36, 28, 38, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 29, 35, 39, 33, 37, 38, 46, 28, 40, 36, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 44, 32, 46, 39, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 45, 31, 32, 35, 40, 37, 42, 33, 46, 38, 39, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21776795387268066, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 39, 38, 29, 33, 42, 40, 36, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 36, 40, 39, 38, 37, 29, 44, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 44, 31, 40, 45, 42, 32, 35, 28, 29, 39, 37, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 36, 44, 33, 42, 39, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 39, 36, 32, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001847982406616211, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 38, 37, 39, 31, 29, 36, 33, 45, 44, 28, 32, 40, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 35, 44, 31, 29, 42, 39, 28, 45, 37, 40, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07694721221923828, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 38, 36, 29, 39, 44, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07587409019470215, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 37, 38, 36, 35, 32, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07611322402954102, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 31, 44, 45, 35, 42, 33, 46, 39, 29, 28, 36, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 33, 45, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 36, 40, 44, 31, 38, 46, 35, 45, 32, 37, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 38, 39, 33, 28, 46, 31, 37, 45, 29, 36, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 36, 28, 37, 39, 31, 44, 38, 45, 40, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 44, 38, 37, 36, 35, 31, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0746159553527832, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [46, 42, 28, 32, 33, 39, 31, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 32, 40, 42, 37, 29, 38, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0736701488494873, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 31, 32, 36, 37, 29, 38, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 42, 35, 40, 44, 31, 46, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2215099334716797, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 46, 40, 36, 31, 33, 37, 38, 35, 42, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22100281715393066, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 29, 45, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 46, 45, 28, 42, 44, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 45, 38, 46, 39, 35, 37, 29, 32, 40, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 33, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 31, 33, 46, 36, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 45, 39, 38, 44, 29, 28, 36, 42, 35, 37, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22328495979309082, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 28, 38, 42, 46, 31, 32, 35, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 39, 28, 37, 33, 32, 29, 40, 31, 44, 42, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07777690887451172, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 45, 35, 36, 31, 40, 37, 29, 32, 46, 44, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.002112150192260742, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 39, 32, 40, 38, 44, 36, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 44, 38, 32, 33, 35, 39, 42, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 28, 38, 39, 37, 29, 32, 35, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07639694213867188, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21683788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 36, 31, 38, 33, 28, 44, 32, 29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 37, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 44, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07964706420898438, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 33, 32, 38, 35, 31, 37, 45, 29, 40, 44, 46, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 35, 38, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive.tar.gz'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.001924753189086914, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42, 45, 31, 29, 32, 38, 46, 44, 36, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07813096046447754, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 36, 35, 38, 39, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 45, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 36, 45, 31, 33, 46, 32, 44, 38, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22328495979309082, "tests_passed": true, "error": null}}
{"selected_lines": [46, 29, 37, 31, 33, 38, 45, 42, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2199077606201172, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 46, 35, 37, 39, 31, 45, 32, 42, 44, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, ' '.join(file_list)])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018270015716552734, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2212848663330078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 45, 39, 40, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 29, 40, 37, 28, 46, 33, 45, 38, 32, 31, 36, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 28, 45, 32, 36, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07697510719299316, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 38, 40, 28, 46, 31, 44, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 45, 36, 39, 35, 46, 38, 44, 40, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 45, 44, 28, 32, 42, 35, 36, 29, 46, 37, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 42, 45, 33, 38, 31, 29, 36, 35, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 28, 29, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 31, 32, 40, 44, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [45, 31, 39, 35, 36, 29, 42, 38, 40, 37, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern)}_' + \\\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{ARCHIVE_DIR}/{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 45, 38, 29, 32, 33, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07807111740112305, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 40, 28, 29, 44, 45, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 44, 45, 31, 32, 28, 29, 36, 35, 33, 40, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 28, 45, 39, 33, 32, 31, 35, 40, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 42, 36, 38, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07861089706420898, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 39, 28, 32, 44, 37, 40, 29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019969940185546875, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21792888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 37, 46, 29, 31, 36, 44, 35, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 35, 29, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07768392562866211, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 46, 37, 45, 35, 36, 44, 38, 29, 28, 39, 31, 40, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.08019399642944336, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 32, 28, 45, 39, 35, 40, 37, 46, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 45, 37, 36, 46, 32, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07776594161987305, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 32, 39, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0020422935485839844, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 44, 32, 33, 39, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 28, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0805199146270752, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 31, 37, 44, 46, 42, 32, 33, 36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 44, 31, 28, 38, 39, 36, 46, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 33, 28, 40, 44, 42, 31, 46, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2196359634399414, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 37, 45, 44, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 39, 40, 44, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 33, 39, 36, 40, 35, 37, 46, 29, 42, 38, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = f\"{archive_file_base}.zip\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--transform',\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 33, 31, 38, 35, 28, 40, 45, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'_{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.2212848663330078, "tests_passed": true, "error": null}}
{"selected_lines": [29, 42, 35, 45, 36, 38, 31, 32, 28, 44, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07671189308166504, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 28, 40, 45, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0018732547760009766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 39, 33, 36, 45, 44, 28, 42, 31, 32, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 36, 32, 46, 40, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07979297637939453, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 28, 40, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07860398292541504, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 39, 28, 31, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07579779624938965, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [40, 44, 37, 35, 42, 29, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07944703102111816, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29, 33, 38, 46, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 40, 39, 31, 45, 37, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07633423805236816, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [39, 35, 32, 44, 38, 31, 42, 28, 46, 37, 45, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(pattern).replace(\".\", \"_\")}_archive'\n    archive_file = archive_file_base + '.zip'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019729137420654297, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 45, 33, 36, 38, 44, 28, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31, 28, 33, 29, 37, 32, 36, 38, 45, 44, 40, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f'{os.path.basename(file_list[0])}_archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.24158382415771484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 36, 33, 42, 37, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15522480010986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 40, 31, 38, 37, 32, 28, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0014739036560058594, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 39, 38, 32, 33, 37, 44, 31, 46], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 29, 28, 38, 36, 33, 46, 31, 37, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 36, 29, 37, 45, 46, 39, 38, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0026972293853759766, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 32, 42, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 46, 28, 40, 32, 36, 31, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07591009140014648, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [37, 29, 36, 44, 42, 33, 46, 38, 35, 32, 39, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21776795387268066, "tests_passed": true, "error": null}}
{"selected_lines": [29, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07772278785705566, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [35, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07846689224243164, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22545695304870605, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 28, 37, 36, 46, 38, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = f'archive{len(file_list)}'\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 29, 46, 33, 39, 31, 28, 36, 32, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38, 35, 31, 42, 39, 36, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 35, 46, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"archive_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 31, 44, 35, 29, 45, 28, 32, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0017740726470947266, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 46, 32, 44, 29, 35, 39, 38, 36, 31, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = ''.join([archive_file_base, '.tar'])\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07523393630981445, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 35, 39, 32, 31, 42, 40, 37, 44, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 44, 39, 32, 42, 31, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0742652416229248, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [36, 37, 33, 46, 28, 45, 40, 42, 38, 44, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = os.path.splitext(archive_file_base)[0] + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 28, 45, 32, 36, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07697510719299316, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21508574485778809, "tests_passed": true, "error": null}}
{"selected_lines": [32, 45, 39, 37, 31, 28, 40, 44, 38, 35, 46, 36, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 39, 36, 44, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 33, 37, 35, 29, 40, 28, 38, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, f\"archive-{os.urandom(4).hex()}\")\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22100281715393066, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 46, 33, 36, 35, 42, 44, 37, 40, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern))\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21776795387268066, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 31, 37, 38, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 42, 38, 33, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22100281715393066, "tests_passed": true, "error": null}}
{"selected_lines": [42, 29, 32, 37, 40, 45, 33, 46, 38, 36, 44, 35, 31, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 38, 32, 36, 46, 31, 39, 29, 42, 28, 45, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07568502426147461, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 39, 31, 38, 36, 35, 32, 37, 33, 29, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 36, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f\"{archive_file_base}.tar.gz\"\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07813382148742676, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 35, 36, 28, 44, 37, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(f'{pattern}')\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.23227381706237793, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35, 28, 29, 45, 44, 38, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.unlink(file)\n    return archive_file", "compilation_passed": true, "time": 0.07648992538452148, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 29, 39, 36, 38, 35, 45, 32, 42, 33, 44, 46, 28, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file_path in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 32, 35, 42, 37, 36, 28, 29, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tgz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07585597038269043, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.15974092483520508, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21618103981018066, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + pattern.split('.')[0]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07554411888122559, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [45, 33, 39, 38, 31, 29, 46, 44, 35, 42, 28, 36, 37, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = f\"{archive_file_base}.{pattern.split('*')[1]}.tar.gz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = f\"{archive_file_base}_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21749114990234375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 29, 33, 46, 37, 28, 39, 38, 35, 44, 42, 32, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 32, 29, 31, 45, 38, 37, 42, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, '--absolute-names'] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0742499828338623, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 39, 29, 28, 46, 45, 35, 31, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive_' + os.path.splitext(file_list[0])[1][1:]\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.00191497802734375, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 29, 42, 28, 35, 36, 45, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 39, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0013091564178466797, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [31, 36, 35, 38, 33, 46, 40, 28, 39, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) > 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.isfile(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 29, 42, 31, 37, 28, 35, 46, 44, 33, 36, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = pattern.split('.')[0] + '_' + str(random.randint(1, 1000))\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list,\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.014543771743774414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 29, 44, 36, 42, 37, 39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07512688636779785, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 42, 45, 29, 36, 44, 35, 39, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return False\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0762796401977539, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [38, 31, 35, 28, 39, 29, 44], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07814908027648926, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [33, 31, 37, 46, 45, 28, 32, 40, 35, 29, 44, 38, 39, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0753331184387207, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [38, 45, 46, 33, 39, 32, 37, 28, 44, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = ''.join([archive_file_base, str(os.getpid()), '.tgz'])\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 28, 35, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern) + '_' + str(time.time())\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 37, 45, 28, 31, 40, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 36, 28, 31, 40, 35, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern).replace('*', '')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07581090927124023, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36, 32, 45, 46, 39, 44, 31, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 40, 39, 46, 32, 38, 35, 28, 29], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.012333869934082031, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 40, 45, 32, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 35, 40, 45, 32, 31, 37, 38, 29, 39, 44, 42, 36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(pattern)}_%Y%m%d_%H%M%S\"\n    archive_file = os.path.join(ARCHIVE_DIR, f'{pattern}.tgz')\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 33, 44, 35, 36, 39, 42, 32, 40, 38, 46, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = pattern.replace('*', '')\n    archive_file = archive_file_base + '.' + os.path.basename(pattern)\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07544088363647461, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 33], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'({counter}).tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 39, 38, 37, 31, 40, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(f\"tar -czf {archive_file} {' '.join(file_list)}\", shell=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07966113090515137, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [36, 42, 29, 37, 35, 32, 46, 40, 28, 45, 39, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}.{uuid.uuid4()}\"\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21845507621765137, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 46, 28, 37, 38, 42, 33, 36, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = 'archive_{time}.tar.gz'.format(time=datetime.now().strftime('%Y%m%d_%H%M%S'))\n    archive_file = f\"{archive_file_base}.tgz\"\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file] + file_list, check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 35, 44, 38, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.basename(pattern)\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.call(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 37, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = 'archive'\n    archive_file = archive_file_base + '.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '_' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0019237995147705078, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [42, 35, 28, 31, 37, 36, 38, 44, 33, 29, 46, 32, 39, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.splitext(os.path.basename(file_list[0]))[0])\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + '-' + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 40, 31, 38, 46, 37, 39, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07504391670227051, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32, 37, 40, 31, 33, 36, 46, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.check_call(['tar', 'czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 37, 38, 44, 31, 45, 29, 36, 42, 46, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tgz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07670903205871582, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 39, 31, 32, 44, 37, 46, 42, 45, 40], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.002148866653442383, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [44, 37, 46, 38, 36, 33, 45, 42, 29, 31, 40, 28], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.curdir, pattern))\n    if not file_list:\n        return\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.zip'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file_name in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 45, 37, 39, 29, 36, 33, 46, 32, 42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return 'No matching files found.'\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.07338595390319824, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [28, 32, 42, 35, 46, 29, 36, 33, 39, 40, 38, 45, 44, 37], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{pattern.replace('.', '_')}_%Y%m%d_%H%M%S.zip\"\n    archive_file = archive_file_base + os.path.splitext(os.path.basename(pattern))[1]\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f'-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list])\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31, 44, 33, 39, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'czf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21773600578308105, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 40, 29, 35, 46, 32, 39, 28, 42, 45, 44, 37, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if len(file_list) < 1:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = f'{archive_file_base}.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + str(counter) + '.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.21948695182800293, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', 'cvzf', archive_file, *file_list], check=True)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22583866119384766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 44, 28, 38], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.isdir(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 28, 35, 32, 40, 37, 45], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(ARCHIVE_DIR, pattern))\n    if not file_list:\n        return None\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, os.path.basename(pattern).replace('*', '_'))\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 0\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 46, 28, 33, 29, 45, 35, 40, 44, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.mkdir(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(os.path.join(os.getcwd(), pattern))\n    if len(file_list) == 0:\n        return None\n    # Create a unique archive file name\n    archive_file_base = f\"{os.path.basename(file_list[0])}\".split('.')[0]\n    archive_file = archive_file_base + '.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = f'{archive_file_base}-{counter}.tar.gz'\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path.\n    \"\"\"\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    if not file_list:\n        return \"No files found matching the pattern.\"\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    return archive_file", "compilation_passed": true, "time": 0.22020411491394043, "tests_passed": true, "error": null}}
