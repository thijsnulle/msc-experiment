{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0037038326263427734, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.00536799430847168, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028209686279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.00146484375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.001077890396118164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.001912832260131836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0011529922485351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015632152557373047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0037038326263427734, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015632152557373047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.005190849304199219, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015632152557373047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0030701160430908203, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0037038326263427734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.005994081497192383, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0016300678253173828, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0030701160430908203, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.001077890396118164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0011529922485351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013377666473388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013377666473388672, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.00146484375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.00536799430847168, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0030701160430908203, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0030701160430908203, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.005190849304199219, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015632152557373047, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.039396047592163086, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.009029150009155273, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0019421577453613281, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016260862350463867, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=range(len(array[0])))\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.005190849304199219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df.to_numpy())\n    return df, transformed_data", "compilation_passed": true, "time": 0.00146484375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver=\"auto\", random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.016490936279296875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, index=['A', 'B', 'C'])\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.013478994369506836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0029108524322509766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, dtype=int)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.001077890396118164, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array, columns=pd.Index(['col_{}'.format(i) for i in range(1, len(array[0])+1)]))\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.010908842086791992, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, svd_solver='full', random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015192031860351562, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.015265703201293945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df.values)\n    return df, transformed_data", "compilation_passed": true, "time": 0.009063959121704102, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\n\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    \"\"\"\n    Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction.\n\n    This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset\n    to its two main components. The function uses a fixed random seed to ensure reproducibility.\n\n    Parameters:\n    - array (list of list of int): A 2D list representing data rows and columns.\n    - random_seed (int, optional): The seed for the random number generator. Default is 42.\n\n    Returns:\n    - pd.DataFrame: The original data in DataFrame format.\n    - np.ndarray: The data after PCA transformation.\n\n    Requirements:\n    - pandas\n    - numpy\n    - sklearn.decomposition.PCA\n\n    Examples:\n    >>> data = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n    >>> df, transformed = task_func(data)\n    >>> print(df)\n        0   1   2   3   4\n    0   1   2   3   4   5\n    1   6   7   8   9  10\n    2  11  12  13  14  15\n    >>> print(transformed[:, 0])\n    [ 11.18033989  -0.         -11.18033989]\n    \"\"\"\n    df = pd.DataFrame(array)\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n    return df, transformed_data", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": true, "error": null}}
